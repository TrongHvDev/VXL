D G "__PCM__" 0 27 ""5.078""
D G "__DEVICE__" 0 27 "1509"
D G "__DATE__" 0 27 ""30-APR-22""
D G "__TIME__" 0 27 ""17:29:25""
D G "_UNICODE" 0 27 ""?""
D G "__EVAL" 0 27 ""?"" "Standard Header file for the PIC16F1509 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 38 ""
v L "value" 2 38 "int8" `55 
f B "set_tris_a" 2 38 "void(int8 value)" `54 
f N "set_tris_b" 2 39 ""
v L "value" 2 39 "int8" `57 
f B "set_tris_b" 2 39 "void(int8 value)" `56 
f N "set_tris_c" 2 40 ""
v L "value" 2 40 "int8" `59 
f B "set_tris_c" 2 40 "void(int8 value)" `58 
f N "get_tris_a" 2 41 ""
f B "get_tris_a" 2 41 "int8()" `60 
f N "get_tris_b" 2 42 ""
f B "get_tris_b" 2 42 "int8()" `61 
f N "get_tris_c" 2 43 ""
f B "get_tris_c" 2 43 "int8()" `62 
f N "output_a" 2 44 ""
v L "value" 2 44 "int8" `64 
f B "output_a" 2 44 "void(int8 value)" `63 
f N "output_b" 2 45 ""
v L "value" 2 45 "int8" `66 
f B "output_b" 2 45 "void(int8 value)" `65 
f N "output_c" 2 46 ""
v L "value" 2 46 "int8" `68 
f B "output_c" 2 46 "void(int8 value)" `67 
f N "input_a" 2 47 ""
f B "input_a" 2 47 "int8()" `69 
f N "input_b" 2 48 ""
f B "input_b" 2 48 "int8()" `70 
f N "input_c" 2 49 ""
f B "input_c" 2 49 "int8()" `71 
f N "input_change_a" 2 50 ""
f B "input_change_a" 2 50 "int8()" `72 
f N "input_change_b" 2 51 ""
f B "input_change_b" 2 51 "int8()" `73 
f N "input_change_c" 2 52 ""
f B "input_change_c" 2 52 "int8()" `74 
f N "port_a_pullups" 2 53 ""
v L "upmask" 2 53 "int8" `76 
f B "port_a_pullups" 2 53 "void(int8 upmask)" `75 
f N "port_c_pullups" 2 54 ""
v L "value" 2 54 "int8" `78 
f B "port_c_pullups" 2 54 "void(int8 value)" `77 
f N "input" 2 55 ""
v L "pin" 2 55 "int16" `80 
f B "input" 2 55 "int8(int16 pin)" `79 
f N "input_state" 2 56 ""
v L "pin" 2 56 "int16" `82 
f B "input_state" 2 56 "int8(int16 pin)" `81 
f N "output_low" 2 57 ""
v L "pin" 2 57 "int16" `84 
f B "output_low" 2 57 "void(int16 pin)" `83 
f N "output_high" 2 58 ""
v L "pin" 2 58 "int16" `86 
f B "output_high" 2 58 "void(int16 pin)" `85 
f N "output_toggle" 2 59 ""
v L "pin" 2 59 "int16" `88 
f B "output_toggle" 2 59 "void(int16 pin)" `87 
f N "output_bit" 2 60 ""
v L "pin" 2 60 "int16" `90 
v L "level" 2 60 "int8" `91 
f B "output_bit" 2 60 "void(int16 pin,int8 level)" `89 
f N "output_float" 2 61 ""
v L "pin" 2 61 "int16" `93 
f B "output_float" 2 61 "void(int16 pin)" `92 
f N "output_drive" 2 62 ""
v L "pin" 2 62 "int16" `95 
f B "output_drive" 2 62 "void(int16 pin)" `94  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 66 "96"
d G "PIN_A1" 2 67 "97"
d G "PIN_A2" 2 68 "98"
d G "PIN_A3" 2 69 "99"
d G "PIN_A4" 2 70 "100"
d G "PIN_A5" 2 71 "101"
d G "PIN_B4" 2 73 "108"
d G "PIN_B5" 2 74 "109"
d G "PIN_B6" 2 75 "110"
d G "PIN_B7" 2 76 "111"
d G "PIN_C0" 2 78 "112"
d G "PIN_C1" 2 79 "113"
d G "PIN_C2" 2 80 "114"
d G "PIN_C3" 2 81 "115"
d G "PIN_C4" 2 82 "116"
d G "PIN_C5" 2 83 "117"
d G "PIN_C6" 2 84 "118"
d G "PIN_C7" 2 85 "119"
d G "FALSE" 2 88 "0"
d G "TRUE" 2 89 "1"
d G "BYTE" 2 91 "int8"
d G "BOOLEAN" 2 92 "int1"
d G "getc" 2 94 "getch"
d G "fgetc" 2 95 "getch"
d G "getchar" 2 96 "getch"
d G "putc" 2 97 "putchar"
d G "fputc" 2 98 "putchar"
d G "fgets" 2 99 "gets"
d G "fputs" 2 100 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 105 ""
f B "restart_cause" 2 105 "int8()" `96 
f N "reset_cpu" 2 106 ""
f B "reset_cpu" 2 106 "void()" `97 
f N "sleep" 2 107 ""
f B "sleep" 2 107 "void()" `98  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 109 "0x3C"
d G "MCLR_FROM_POWER_UP" 2 110 "0x34"
d G "BROWNOUT_RESTART" 2 111 "0x3E"
d G "MCLR_FROM_SLEEP" 2 112 "0x27"
d G "WDT_TIMEOUT" 2 113 "0x1F"
d G "WDT_FROM_SLEEP" 2 114 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 115 "0x2F"
d G "MCLR_FROM_RUN" 2 116 "0x37"
d G "RESET_INSTRUCTION" 2 117 "0x3B"
d G "STACK_OVERFLOW" 2 118 "0xBF"
d G "STACK_UNDERFLOW" 2 119 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 126 ""
v L "mode" 2 126 "int8" `100 
f B "setup_timer_0" 2 126 "void(int8 mode)" `99 
f N "set_timer0" 2 127 ""
v L "value" 2 127 "int8" `102 
f B "set_timer0" 2 127 "void(int8 value)" `101 
f N "get_timer0" 2 128 ""
f B "get_timer0" 2 128 "int8()" `103 
f N "setup_counters" 2 129 ""
v L "mode" 2 129 "int8" `105 
v L "prescaler" 2 129 "int8" `106 
f B "setup_counters" 2 129 "void(int8 mode,int8 prescaler)" `104 
f N "set_rtcc" 2 130 ""
v L "value" 2 130 "int8" `108 
f B "set_rtcc" 2 130 "void(int8 value)" `107 
f N "get_rtcc" 2 131 ""
f B "get_rtcc" 2 131 "int8()" `109  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 133 "0"
d G "T0_EXT_L_TO_H" 2 134 "32"
d G "T0_EXT_H_TO_L" 2 135 "48"
d G "T0_DIV_1" 2 137 "8"
d G "T0_DIV_2" 2 138 "0"
d G "T0_DIV_4" 2 139 "1"
d G "T0_DIV_8" 2 140 "2"
d G "T0_DIV_16" 2 141 "3"
d G "T0_DIV_32" 2 142 "4"
d G "T0_DIV_64" 2 143 "5"
d G "T0_DIV_128" 2 144 "6"
d G "T0_DIV_256" 2 145 "7"
d G "T0_8_BIT" 2 148 "0"
d G "RTCC_INTERNAL" 2 152 "0"
d G "RTCC_EXT_L_TO_H" 2 153 "32"
d G "RTCC_EXT_H_TO_L" 2 154 "48"
d G "RTCC_DIV_1" 2 155 "8"
d G "RTCC_DIV_2" 2 156 "0"
d G "RTCC_DIV_4" 2 157 "1"
d G "RTCC_DIV_8" 2 158 "2"
d G "RTCC_DIV_16" 2 159 "3"
d G "RTCC_DIV_32" 2 160 "4"
d G "RTCC_DIV_64" 2 161 "5"
d G "RTCC_DIV_128" 2 162 "6"
d G "RTCC_DIV_256" 2 163 "7"
d G "RTCC_8_BIT" 2 164 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
f N "setup_wdt" 2 174 ""
v L "mode" 2 174 "int16" `111 
f B "setup_wdt" 2 174 "void(int16 mode)" `110 
f N "restart_wdt" 2 175 ""
f B "restart_wdt" 2 175 "void()" `112  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 177 "0x1000"
d G "WDT_OFF" 2 178 "0x2000"
d G "WDT_1MS" 2 180 "0x100"
d G "WDT_2MS" 2 181 "0x101"
d G "WDT_4MS" 2 182 "0x102"
d G "WDT_8MS" 2 183 "0x103"
d G "WDT_16MS" 2 184 "0x104"
d G "WDT_32MS" 2 185 "0x105"
d G "WDT_64MS" 2 186 "0x106"
d G "WDT_128MS" 2 187 "0x107"
d G "WDT_256MS" 2 188 "0x108"
d G "WDT_512MS" 2 189 "0x109"
d G "WDT_1S" 2 190 "0x10A"
d G "WDT_2S" 2 191 "0x10B"
d G "WDT_4S" 2 192 "0x10C"
d G "WDT_8S" 2 193 "0x10D"
d G "WDT_16S" 2 194 "0x10E"
d G "WDT_32S" 2 195 "0x10F"
d G "WDT_64S" 2 196 "0x110"
d G "WDT_128S" 2 197 "0x111"
d G "WDT_256S" 2 198 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 203 ""
v L "mode" 2 203 "int16" `114 
f B "setup_timer_1" 2 203 "void(int16 mode)" `113 
f N "get_timer1" 2 204 ""
f B "get_timer1" 2 204 "int16()" `115 
f N "set_timer1" 2 205 ""
v L "value" 2 205 "int16" `117 
f B "set_timer1" 2 205 "void(int16 value)" `116  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 208 "0"
d G "T1_CAPSENSE" 2 209 "0xC5"
d G "T1_EXTERNAL" 2 210 "0x85"
d G "T1_EXTERNAL_SYNC" 2 211 "0x81"
d G "T1_FOSC" 2 212 "0x45"
d G "T1_INTERNAL" 2 213 "0x05"
d G "T1_ENABLE_T1OSC" 2 215 "0x08"
d G "T1_DIV_BY_1" 2 217 "0x00"
d G "T1_DIV_BY_2" 2 218 "0x10"
d G "T1_DIV_BY_4" 2 219 "0x20"
d G "T1_DIV_BY_8" 2 220 "0x30"
d G "T1_GATE" 2 222 "0x8000"
d G "T1_GATE_INVERTED" 2 223 "0xC000"
d G "T1_GATE_TOGGLE" 2 224 "0xA000"
d G "T1_GATE_SINGLE" 2 225 "0x9000"
d G "T1_GATE_TIMER0" 2 226 "0x8100"
d G "T1_GATE_COMP1" 2 227 "0x8200"
d G "T1_GATE_COMP2" 2 228 "0x8300"
d G "T1_GATE_A4" 2 230 "0"
d G "T1_GATE_A3" 2 231 "0x10000"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 236 ""
v L "mode" 2 236 "int8" `119 
v L "period" 2 236 "int8" `120 
v L "postscale" 2 236 "int8" `121 
f B "setup_timer_2" 2 236 "void(int8 mode,int8 period,int8 postscale)" `118 
f N "get_timer2" 2 237 ""
f B "get_timer2" 2 237 "int8()" `122 
f N "set_timer2" 2 238 ""
v L "value" 2 238 "int8" `124 
f B "set_timer2" 2 238 "void(int8 value)" `123  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 240 "0"
d G "T2_DIV_BY_1" 2 241 "4"
d G "T2_DIV_BY_4" 2 242 "5"
d G "T2_DIV_BY_16" 2 243 "6"
d G "T2_DIV_BY_64" 2 244 "7"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_spi" 2 249 ""
v L "mode" 2 249 "int32" `126 
f B "setup_spi" 2 249 "void(int32 mode)" `125 
f N "spi_write" 2 250 ""
v L "value" 2 250 "int8" `128 
f B "spi_write" 2 250 "void(int8 value)" `127 
f N "spi_read" 2 251 ""
f B "spi_read" 2 251 "int8()" `129 
f N "spi_read" 2 252 ""
v L "value" 2 252 "int8" `131 
f B "spi_read" 2 252 "int8(int8 value)" `130 
f N "spi_data_is_in" 2 253 ""
f B "spi_data_is_in" 2 253 "int8()" `132  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 255 "0x00"
d G "SPI_MASTER" 2 256 "0x20"
d G "SPI_SLAVE" 2 257 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 258 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 259 "0x00"
d G "SPI_CLK_DIV_4" 2 260 "0x00"
d G "SPI_CLK_DIV_16" 2 261 "0x01"
d G "SPI_CLK_DIV_64" 2 262 "0x02"
d G "SPI_CLK_T2" 2 263 "0x03"
d G "SPI_SS_DISABLED" 2 264 "0x01"
d G "SPI_SS_C6" 2 266 "0x00000"
d G "SPI_SS_A3" 2 267 "0x10000"
d G "SPI_XMIT_L_TO_H" 2 269 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 270 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 272 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 273 "0x8000"
d G "SPI_L_TO_H" 2 276 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 277 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 281 ""
v L "baud" 2 281 "int32" `134 
f B "setup_uart" 2 281 "void(int32 baud)" `133 
f N "setup_uart" 2 282 ""
v L "baud" 2 282 "int32" `136 
v L "stream" 2 282 "int8" `137 
f B "setup_uart" 2 282 "void(int32 baud,int8 stream)" `135 
f N "setup_uart" 2 283 ""
v L "baud" 2 283 "int32" `139 
v L "stream" 2 283 "int8" `140 
v L "clock" 2 283 "int32" `141 
f B "setup_uart" 2 283 "void(int32 baud,int8 stream,int32 clock)" `138 
f N "set_uart_speed" 2 284 ""
v L "baud" 2 284 "int32" `143 
f B "set_uart_speed" 2 284 "void(int32 baud)" `142 
f N "set_uart_speed" 2 285 ""
v L "baud" 2 285 "int32" `145 
v L "stream" 2 285 "int8" `146 
f B "set_uart_speed" 2 285 "void(int32 baud,int8 stream)" `144 
f N "set_uart_speed" 2 286 ""
v L "baud" 2 286 "int32" `148 
v L "stream" 2 286 "int8" `149 
v L "clock" 2 286 "int32" `150 
f B "set_uart_speed" 2 286 "void(int32 baud,int8 stream,int32 clock)" `147  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 290 "2"
d G "UART_DATA" 2 291 "4"
d G "UART_AUTODETECT" 2 292 "8"
d G "UART_AUTODETECT_NOWAIT" 2 293 "9"
d G "UART_WAKEUP_ON_RDA" 2 294 "10"
d G "UART_SEND_BREAK" 2 295 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 299 ""
v L "mode" 2 299 "int32" `152 
f B "setup_comparator" 2 299 "void(int32 mode)" `151  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 302 "0x00"
d G "CP1_A1_A0" 2 305 "0x8000"
d G "CP1_C1_A0" 2 306 "0x8001"
d G "CP1_C2_A0" 2 307 "0x8002"
d G "CP1_C3_A0" 2 308 "0x8003"
d G "CP1_FVR_A0" 2 309 "0x8004"
d G "CP1_A1_DAC" 2 310 "0x8010"
d G "CP1_C1_DAC" 2 311 "0x8011"
d G "CP1_C2_DAC" 2 312 "0x8012"
d G "CP1_C3_DAC" 2 313 "0x8013"
d G "CP1_FVR_DAC" 2 314 "0x8014"
d G "CP1_A1_FVR" 2 315 "0x8020"
d G "CP1_C1_FVR" 2 316 "0x8021"
d G "CP1_C2_FVR" 2 317 "0x8022"
d G "CP1_C3_FVR" 2 318 "0x8023"
d G "CP1_FVR_FVR" 2 319 "0x8024"
d G "CP1_A1_VSS" 2 320 "0x8030"
d G "CP1_C1_VSS" 2 321 "0x8031"
d G "CP1_C2_VSS" 2 322 "0x8032"
d G "CP1_C3_VSS" 2 323 "0x8033"
d G "CP1_FVR_VSS" 2 324 "0x8034"
d G "CP1_INT_L2H" 2 326 "0x0080"
d G "CP1_INT_H2L" 2 327 "0x0040"
d G "CP1_OUT_ON_A2" 2 328 "0x2000"
d G "CP1_INVERT" 2 329 "0x1000"
d G "CP1_FAST" 2 330 "0x0400"
d G "CP1_HYST" 2 331 "0x0200"
d G "CP1_SYNC" 2 332 "0x0100"
d G "CP2_A1_C0" 2 335 "0x80000000"
d G "CP2_C1_C0" 2 336 "0x80010000"
d G "CP2_C2_C0" 2 337 "0x80020000"
d G "CP2_C3_C0" 2 338 "0x80030000"
d G "CP2_FVR_C0" 2 339 "0x80040000"
d G "CP2_A1_DAC" 2 340 "0x80100000"
d G "CP2_C1_DAC" 2 341 "0x80110000"
d G "CP2_C2_DAC" 2 342 "0x80120000"
d G "CP2_C3_DAC" 2 343 "0x80130000"
d G "CP2_FVR_DAC" 2 344 "0x80140000"
d G "CP2_A1_FVR" 2 345 "0x80200000"
d G "CP2_C1_FVR" 2 346 "0x80210000"
d G "CP2_C2_FVR" 2 347 "0x80220000"
d G "CP2_C3_FVR" 2 348 "0x80230000"
d G "CP2_FVR_FVR" 2 349 "0x80240000"
d G "CP2_A1_VSS" 2 350 "0x80300000"
d G "CP2_C1_VSS" 2 351 "0x80310000"
d G "CP2_C2_VSS" 2 352 "0x80320000"
d G "CP2_C3_VSS" 2 353 "0x80330000"
d G "CP2_FVR_VSS" 2 354 "0x80340000"
d G "CP2_INT_L2H" 2 356 "0x00800000"
d G "CP2_INT_H2L" 2 357 "0x00400000"
d G "CP2_OUT_ON_C4" 2 358 "0x20000000"
d G "CP2_INVERT" 2 359 "0x10000000"
d G "CP2_FAST" 2 360 "0x04000000"
d G "CP2_HYST" 2 361 "0x02000000"
d G "CP2_SYNC" 2 362 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 369 ""
v L "mode" 2 369 "int8" `156 
f B "setup_vref" 2 369 "void(int8 mode)" `155  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 371 "0"
d G "VREF_ON" 2 372 "0x80"
d G "VREF_ADC_OFF" 2 374 "0"
d G "VREF_ADC_1v024" 2 375 "0x81"
d G "VREF_ADC_2v048" 2 376 "0x82"
d G "VREF_ADC_4v096" 2 377 "0x83"
d G "VREF_COMP_DAC_OFF" 2 379 "0"
d G "VREF_COMP_DAC_1v024" 2 380 "0x84"
d G "VREF_COMP_DAC_2v048" 2 381 "0x88"
d G "VREF_COMP_DAC_4v096" 2 382 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 384 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 385 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 386 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 387 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_dac" 2 392 ""
v L "mode" 2 392 "int8" `158 
f B "setup_dac" 2 392 "void(int8 mode)" `157 
f N "dac_write" 2 393 ""
v L "value" 2 393 "int8" `160 
f B "dac_write" 2 393 "void(int8 value)" `159  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 395 "0"
d G "DAC_VSS_VDD" 2 396 "0x80"
d G "DAC_VSS_VREF" 2 397 "0x84"
d G "DAC_OUTPUT1" 2 399 "0x20" "DAC voltage level outputted on DACOUT1 pin"
d G "DAC_OUTPUT2" 2 400 "0x10" "DAC voltage level outputted on DACOUT2 pin"
c L "dac_write" 2 3 3 "FUNCTION"
f N "setup_cwg" 2 405 ""
v L "mode" 2 405 "int32" `162 
v L "shutdown" 2 405 "int16" `163 
v L "dt_rising" 2 405 "int8" `164 
v L "dt_falling" 2 405 "int8" `165 
f B "setup_cwg" 2 405 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `161 
f N "cwg_restart" 2 406 ""
f B "cwg_restart" 2 406 "void()" `166 
f N "cwg_status" 2 407 ""
f B "cwg_status" 2 407 "int8()" `167  "Constants used in SETUP_CWG() first parameter are:"
d G "CWG_ENABLED" 2 409 "0x0080"
d G "CWG_DISABLED" 2 410 "0"
d G "CWG_OUTPUT_A" 2 411 "0x0020"
d G "CWG_OUTPUT_B" 2 412 "0x0040"
d G "CWG_A_INVERTED" 2 413 "0x0008"
d G "CWG_B_INVERTED" 2 414 "0x0010"
d G "CWG_CLOCK_HFINTOSC" 2 415 "0x0001"
d G "CWG_CLOCK_FOSC" 2 416 "0x0000"
d G "CWG_INPUT_C1OUT" 2 417 "0x0100"
d G "CWG_INPUT_PWM1" 2 418 "0x0200"
d G "CWG_INPUT_PWM2" 2 419 "0x0300"
d G "CWG_INPUT_PWM3" 2 420 "0x0400"
d G "CWG_INPUT_PWM4" 2 421 "0x0500"
d G "CWG_INPUT_NCO1OUT" 2 422 "0x0600"
d G "CWG_INPUT_LC1OUT" 2 423 "0x0700"
d G "CWG_NO_AUTO_SHUTDOWN" 2 427 "0"
d G "CWG_SHUTDOWN_ON_CLC2" 2 428 "0x0001"
d G "CWG_SHUTDOWN_ON_FLT" 2 429 "0x0002"
d G "CWG_SHUTDOWN_ON_COMP1" 2 430 "0x0004"
d G "CWG_AUTO_RESTART" 2 431 "0x0040"
d G "CWG_SHUTDOWN_A_INACTIVE_STATE" 2 433 "0"
d G "CWG_SHUTDOWN_A_TRISTATE" 2 434 "0x1000"
d G "CWG_SHUTDOWN_A_LOW" 2 435 "0x2000"
d G "CWG_SHUTDOWN_A_HIGH" 2 436 "0x3000"
d G "CWG_SHUTDOWN_B_INACTIVE_STATE" 2 438 "0"
d G "CWG_SHUTDOWN_B_TRISTATE" 2 439 "0x4000"
d G "CWG_SHUTDOWN_B_LOW" 2 440 "0x8000"
d G "CWG_SHUTDOWN_B_HIGH" 2 441 "0xC000"
d G "CWG_AUTO_SHUTDOWN" 2 444 "0x80"
c L "cwg_status" 2 3 5 "FUNCTION"
f N "setup_nco" 2 451 ""
v L "mode" 2 451 "int32" `169 
v L "inc_value" 2 451 "int16" `170 
f B "setup_nco" 2 451 "void(int32 mode,int16 inc_value)" `168 
f N "set_nco_inc_value" 2 452 ""
v L "value" 2 452 "int16" `172 
f B "set_nco_inc_value" 2 452 "void(int16 value)" `171 
f N "set_nco_accumulator" 2 453 ""
v L "value" 2 453 "int32" `174 
f B "set_nco_accumulator" 2 453 "void(int32 value)" `173 
f N "get_nco_accumulator" 2 454 ""
f B "get_nco_accumulator" 2 454 "int32()" `175 
f N "get_nco_inc_value" 2 455 ""
f B "get_nco_inc_value" 2 455 "int16()" `176  "Constants used in SETUP_NCO() first parameter are:"
d G "NCO_ENABLED" 2 457 "0x0080"
d G "NCO_DISABLED" 2 458 "0"
d G "NCO_OUTPUT" 2 459 "0x0040"
d G "NCO_ACTIVE_HIGH" 2 460 "0x0010"
d G "NCO_ACTIVE_LOW" 2 461 "0"
d G "NCO_PULSE_FREQ_MODE" 2 462 "0x0001"
d G "NCO_FIXED_DUTY_MODE" 2 463 "0"
d G "NCO_CLOCK_NCO1CLK" 2 465 "0x0300"
d G "NCO_CLOCK_LC1OUT" 2 466 "0x0200"
d G "NCO_CLOCK_FOSC" 2 467 "0x0100"
d G "NCO_CLOCK_HFINOSC" 2 468 "0"
d G "NCO_PULSE_WIDTH_1" 2 471 "0"
d G "NCO_PULSE_WIDTH_2" 2 472 "0x2000"
d G "NCO_PULSE_WIDTH_4" 2 473 "0x4000"
d G "NCO_PULSE_WIDTH_8" 2 474 "0x6000"
d G "NCO_PULSE_WIDTH_16" 2 475 "0x8000"
d G "NCO_PULSE_WIDTH_32" 2 476 "0xA000"
d G "NCO_PULSE_WIDTH_64" 2 477 "0xC000"
d G "NCO_PULSE_WIDTH_128" 2 478 "0xE000"
d G "NCO_NCO1_C6" 2 480 "0x10000"
d G "NCO_NCO1_C1" 2 481 "0"
c L "get_nco_inc_value" 2 3 4 "FUNCTION"
f N "setup_clc1" 2 489 ""
v L "mode" 2 489 "int32" `179 
f B "setup_clc1" 2 489 "void(int32 mode)" `178 
f N "setup_clc2" 2 490 ""
v L "mode" 2 490 "int32" `181 
f B "setup_clc2" 2 490 "void(int32 mode)" `180 
f N "setup_clc3" 2 491 ""
v L "mode" 2 491 "int32" `183 
f B "setup_clc3" 2 491 "void(int32 mode)" `182 
f N "setup_clc4" 2 492 ""
v L "mode" 2 492 "int32" `185 
f B "setup_clc4" 2 492 "void(int32 mode)" `184 
f N "clc1_setup_input" 2 493 ""
v L "input" 2 493 "int8" `187 
v L "selection" 2 493 "int8" `188 
f B "clc1_setup_input" 2 493 "void(int8 input,int8 selection)" `186 
f N "clc2_setup_input" 2 494 ""
v L "input" 2 494 "int8" `190 
v L "selection" 2 494 "int8" `191 
f B "clc2_setup_input" 2 494 "void(int8 input,int8 selection)" `189 
f N "clc3_setup_input" 2 495 ""
v L "input" 2 495 "int8" `193 
v L "selection" 2 495 "int8" `194 
f B "clc3_setup_input" 2 495 "void(int8 input,int8 selection)" `192 
f N "clc4_setup_input" 2 496 ""
v L "input" 2 496 "int8" `196 
v L "selection" 2 496 "int8" `197 
f B "clc4_setup_input" 2 496 "void(int8 input,int8 selection)" `195 
f N "clc1_setup_gate" 2 497 ""
v L "gate" 2 497 "int8" `199 
v L "mode" 2 497 "int16" `200 
f B "clc1_setup_gate" 2 497 "void(int8 gate,int16 mode)" `198 
f N "clc2_setup_gate" 2 498 ""
v L "gate" 2 498 "int8" `202 
v L "mode" 2 498 "int16" `203 
f B "clc2_setup_gate" 2 498 "void(int8 gate,int16 mode)" `201 
f N "clc3_setup_gate" 2 499 ""
v L "gate" 2 499 "int8" `205 
v L "mode" 2 499 "int16" `206 
f B "clc3_setup_gate" 2 499 "void(int8 gate,int16 mode)" `204 
f N "clc4_setup_gate" 2 500 ""
v L "gate" 2 500 "int8" `208 
v L "mode" 2 500 "int16" `209 
f B "clc4_setup_gate" 2 500 "void(int8 gate,int16 mode)" `207  "Constants used in SETUP_CLCx() are:"
d G "CLC_ENABLED" 2 502 "0x080"
d G "CLC_DISABLED" 2 503 "0"
d G "CLC_OUTPUT" 2 504 "0x040"
d G "CLC_INT_L_TO_H" 2 505 "0x010"
d G "CLC_INT_H_TO_L" 2 506 "0x008"
d G "CLC_OUTPUT_INVERTED" 2 507 "0x100"
d G "CLC_MODE_AND_OR" 2 509 "0x000"
d G "CLC_MODE_OR_XOR" 2 510 "0x001"
d G "CLC_MODE_AND" 2 511 "0x002"
d G "CLC_MODE_SR_LATCH" 2 512 "0x003"
d G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 2 513 "0x004"
d G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 2 514 "0x005"
d G "CLC_MODE_JK_FLIP_FLOP" 2 515 "0x006"
d G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 2 516 "0x007"
d G "CLC_CLC1_A2" 2 518 "0"
d G "CLC_INPUT_0" 2 521 "0"
d G "CLC_INPUT_1" 2 522 "0x01"
d G "CLC_INPUT_2" 2 523 "0x02"
d G "CLC_INPUT_3" 2 524 "0x03"
d G "CLC_INPUT_4" 2 525 "0x04"
d G "CLC_INPUT_5" 2 526 "0x05"
d G "CLC_INPUT_6" 2 527 "0x06"
d G "CLC_INPUT_7" 2 528 "0x07"
d G "CLC_GATE_AND" 2 532 "0x155"
d G "CLC_GATE_NAND" 2 533 "0x055"
d G "CLC_GATE_NOR" 2 534 "0x1AA"
d G "CLC_GATE_OR" 2 535 "0x0AA"
d G "CLC_GATE_CLEAR" 2 536 "0"
d G "CLC_GATE_SET" 2 537 "0x100"
d G "CLC_GATE_INVERTED_INPUT_1" 2 541 "0x001"
d G "CLC_GATE_NON_INVERTED_INPUT_1" 2 542 "0x002"
d G "CLC_GATE_INVERTED_INPUT_2" 2 543 "0x004"
d G "CLC_GATE_NON_INVERTED_INPUT_2" 2 544 "0x008"
d G "CLC_GATE_INVERTED_INPUT_3" 2 545 "0x010"
d G "CLC_GATE_NON_INVERTED_INPUT_3" 2 546 "0x020"
d G "CLC_GATE_INVERTED_INPUT_4" 2 547 "0x040"
d G "CLC_GATE_NON_INVERTED_INPUT_4" 2 548 "0x080"
d G "CLC_GATE_OUTPUT_INVERTED" 2 549 "0x100"
c L "clc4_setup_gate" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 559 ""
v L "mode" 2 559 "int8" `215 
f B "setup_oscillator" 2 559 "void(int8 mode)" `214  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 562 "0"
d G "OSC_31250" 2 563 " (2*8)"
d G "OSC_62KHZ" 2 564 " (4*8)"
d G "OSC_125KHZ" 2 565 " (5*8)"
d G "OSC_250KHZ" 2 566 " (6*8)"
d G "OSC_500KHZ" 2 567 " (7*8)"
d G "OSC_1MHZ" 2 568 " (11*8)"
d G "OSC_2MHZ" 2 569 " (12*8)"
d G "OSC_4MHZ" 2 570 " (13*8)"
d G "OSC_8MHZ" 2 571 " (14*8)"
d G "OSC_16MHZ" 2 572 " (15*8)"
d G "OSC_SOSC" 2 574 "1"
d G "OSC_INTRC" 2 575 "2"
d G "OSC_NORMAL" 2 576 "0"
c L "setup_oscillator" 2 3 3 "FUNCTION"
f N "setup_pwm1" 2 581 ""
v L "mode" 2 581 "int16" `217 
f B "setup_pwm1" 2 581 "void(int16 mode)" `216 
f N "set_pwm1_duty" 2 582 ""
v L "value" 2 582 "int16" `219 
f B "set_pwm1_duty" 2 582 "void(int16 value)" `218 
f N "setup_pwm2" 2 583 ""
v L "mode" 2 583 "int16" `221 
f B "setup_pwm2" 2 583 "void(int16 mode)" `220 
f N "set_pwm2_duty" 2 584 ""
v L "value" 2 584 "int16" `223 
f B "set_pwm2_duty" 2 584 "void(int16 value)" `222 
f N "setup_pwm3" 2 585 ""
v L "mode" 2 585 "int16" `225 
f B "setup_pwm3" 2 585 "void(int16 mode)" `224 
f N "set_pwm3_duty" 2 586 ""
v L "value" 2 586 "int16" `227 
f B "set_pwm3_duty" 2 586 "void(int16 value)" `226 
f N "setup_pwm4" 2 587 ""
v L "mode" 2 587 "int16" `229 
f B "setup_pwm4" 2 587 "void(int16 mode)" `228 
f N "set_pwm4_duty" 2 588 ""
v L "value" 2 588 "int16" `231 
f B "set_pwm4_duty" 2 588 "void(int16 value)" `230  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 2 590 "0x80"
d G "PWM_DISABLED" 2 591 "0x0400"
d G "PWM_ACTIVE_LOW" 2 593 "0x10"
d G "PWM_ACTIVE_HIGH" 2 594 "0"
d G "PWM_OUTPUT" 2 596 "0x40"
c L "set_pwm4_duty" 2 3 4 "FUNCTION"
f N "setup_adc" 2 609 ""
v L "mode" 2 609 "int16" `237 
f B "setup_adc" 2 609 "void(int16 mode)" `236 
f N "read_adc" 2 610 ""
f B "read_adc" 2 610 "int8()" `238 
f N "read_adc" 2 611 ""
v L "mode" 2 611 "int8" `240 
f B "read_adc" 2 611 "int8(int8 mode)" `239 
f N "read_adc" 2 612 ""
f G "read_adc" 2 612 "int16()" `241 
f N "read_adc" 2 613 ""
v L "mode" 2 613 "int8" `242 
f G "read_adc" 2 613 "int16(int8 mode,int32 pins)" `241 
f N "adc_done" 2 614 ""
f B "adc_done" 2 614 "int8(int8 mode,int32 pins)" `241  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 616 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 617 "0x100"
d G "ADC_CLOCK_DIV_4" 2 618 "0x40"
d G "ADC_CLOCK_DIV_8" 2 619 "0x10"
d G "ADC_CLOCK_DIV_32" 2 620 "0x20"
d G "ADC_CLOCK_DIV_16" 2 621 "0x50"
d G "ADC_CLOCK_DIV_64" 2 622 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 623 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 626 ""
v L "pins" 2 626 "int32" `243 
f B "setup_adc_ports" 2 626 "void(int32 pins)" `242 
f N "setup_adc_ports" 2 627 ""
v L "pins" 2 627 "int32" `245 
v L "reference" 2 627 "int32" `246 
f B "setup_adc_ports" 2 627 "void(int32 pins,int32 reference)" `244 
f N "set_analog_pins" 2 628 ""
v L "pin" 2 628 "int8" `248 
f B "set_analog_pins" 2 628 "void(int8 pin,*int8 _VA_LIST)" `247 
f N "setup_adc_reference" 2 629 ""
v L "reference" 2 629 "int32" `251 
f B "setup_adc_reference" 2 629 "void(int32 reference)" `250 
f N "set_adc_channel" 2 630 ""
v L "channel" 2 630 "int8" `253 
f B "set_adc_channel" 2 630 "void(int8 channel)" `252  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 634 "0x00010000" "| A0"
d G "sAN1" 2 635 "0x00020000" "| A1"
d G "sAN2" 2 636 "0x00040000" "| A2"
d G "sAN3" 2 637 "0x00100000" "| A4"
d G "sAN4" 2 638 "0x00000100" "| C0"
d G "sAN5" 2 639 "0x00000200" "| C1"
d G "sAN6" 2 640 "0x00000400" "| C2"
d G "sAN7" 2 641 "0x00000800" "| C3"
d G "sAN8" 2 642 "0x00004000" "| C6"
d G "sAN9" 2 643 "0x00008000" "| C7"
d G "sAN10" 2 644 "0x00000010" "| B4"
d G "sAN11" 2 645 "0x00000020" "| B5"
d G "NO_ANALOGS" 2 646 "0" "None"
d G "ALL_ANALOG" 2 647 "0x0017CF30" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 2 650 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 651 "0x02000000" "| Range 0-VrefH"
d G "TEMPERATURE_INDICATOR" 2 655 "0x1D"
d G "DAC_CHANNEL" 2 656 "0x1E"
d G "FVR_CHANNEL" 2 657 "0x1F"
d G "ADC_START_AND_READ" 2 660 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 661 "1"
d G "ADC_READ_ONLY" 2 662 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 668 ""
v L "x" 2 668 "sint8" `255 
f B "abs" 2 668 "sint8(sint8 x)" `254 
f N "abs" 2 669 ""
v L "x" 2 669 "sint16" `257 
f B "abs" 2 669 "sint16(sint16 x)" `256 
f N "abs" 2 670 ""
v L "x" 2 670 "sint32" `259 
f B "abs" 2 670 "sint32(sint32 x)" `258 
f N "abs" 2 671 ""
v L "x" 2 671 "float" `261 
f B "abs" 2 671 "float(float x)" `260 
f N "_mul" 2 672 ""
v L "??65535" 2 672 "int8" `263 
v L "??65535" 2 672 "int8" `264 
f B "_mul" 2 672 "int16(int8 ,int8 )" `262 
f N "_mul" 2 673 ""
v L "??65535" 2 673 "sint8" `266 
v L "??65535" 2 673 "sint8" `267 
f B "_mul" 2 673 "sint16(sint8 ,sint8 )" `265 
f N "_mul" 2 674 ""
v L "??65535" 2 674 "int16" `269 
v L "??65535" 2 674 "int16" `270 
f B "_mul" 2 674 "int32(int16 ,int16 )" `268 
f N "_mul" 2 675 ""
v L "??65535" 2 675 "sint16" `272 
v L "??65535" 2 675 "sint16" `273 
f B "_mul" 2 675 "sint32(sint16 ,sint16 )" `271  "Memory Manipulation Prototypes:"
f N "read_bank" 2 678 ""
v L "bank" 2 678 "int8" `275 
v L "offset" 2 678 "int8" `276 
f B "read_bank" 2 678 "int8(int8 bank,int8 offset)" `274 
f N "write_bank" 2 679 ""
v L "bank" 2 679 "int8" `278 
v L "offset" 2 679 "int8" `279 
v L "value" 2 679 "int8" `280 
f B "write_bank" 2 679 "void(int8 bank,int8 offset,int8 value)" `277 
f N "strcpy" 2 680 ""
v L "dest" 2 680 "*int8" `282 
v L "src" 2 680 "*int8" `283 
f B "strcpy" 2 680 "void(*int8 dest,*int8 src)" `281 
f N "memset" 2 681 ""
v L "destination" 2 681 "*int8" `285 
v L "value" 2 681 "int8" `286 
v L "num" 2 681 "int16" `287 
f B "memset" 2 681 "void(*int8 destination,int8 value,int16 num)" `284 
f N "memcpy" 2 682 ""
v L "destination" 2 682 "*int8" `289 
v L "source" 2 682 "*int8" `290 
v L "num" 2 682 "int16" `291 
f B "memcpy" 2 682 "void(*int8 destination,*int8 source,int16 num)" `288  "String Prototypes:"
f N "toupper" 2 685 ""
v L "cvalue" 2 685 "int8" `293 
f B "toupper" 2 685 "int8(int8 cvalue)" `292 
f N "tolower" 2 686 ""
v L "cvalue" 2 686 "int8" `295 
f B "tolower" 2 686 "int8(int8 cvalue)" `294 
f N "sprintf" 2 687 ""
v L "string" 2 687 "*int8" `297 
v L "cstring" 2 687 "*int8" `298 
f B "sprintf" 2 687 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `296  "Data Manipulators Prototypes:"
f N "shift_left" 2 690 ""
v L "address" 2 690 "*int8" `301 
v L "bytes" 2 690 "int8" `302 
v L "value" 2 690 "int8" `303 
f B "shift_left" 2 690 "int8(*int8 address,int8 bytes,int8 value)" `300 
f N "shift_right" 2 691 ""
v L "address" 2 691 "*int8" `305 
v L "bytes" 2 691 "int8" `306 
v L "value" 2 691 "int8" `307 
f B "shift_right" 2 691 "int8(*int8 address,int8 bytes,int8 value)" `304 
f N "rotate_left" 2 692 ""
v L "address" 2 692 "*int8" `309 
v L "bytes" 2 692 "int8" `310 
f B "rotate_left" 2 692 "void(*int8 address,int8 bytes)" `308 
f N "rotate_right" 2 693 ""
v L "address" 2 693 "*int8" `312 
v L "bytes" 2 693 "int8" `313 
f B "rotate_right" 2 693 "void(*int8 address,int8 bytes)" `311 
f N "swap" 2 694 ""
v L "value" 2 694 "int8" `315 
f B "swap" 2 694 "void(int8 value)" `314 
f N "make8" 2 695 ""
v L "var" 2 695 "int16" `317 
v L "offset" 2 695 "int8" `318 
f B "make8" 2 695 "int8(int16 var,int8 offset)" `316 
f N "make8" 2 696 ""
v L "var" 2 696 "int32" `320 
v L "offset" 2 696 "int8" `321 
f B "make8" 2 696 "int8(int32 var,int8 offset)" `319 
f N "make16" 2 697 ""
v L "varhigh" 2 697 "int8" `323 
v L "varlow" 2 697 "int8" `324 
f B "make16" 2 697 "int16(int8 varhigh,int8 varlow)" `322 
f N "make32" 2 698 ""
v L "var1" 2 698 "int16" `326 
f B "make32" 2 698 "int32(int16 var1)" `325 
f N "make32" 2 699 ""
v L "var1" 2 699 "int16" `328 
v L "var2" 2 699 "int16" `329 
f B "make32" 2 699 "int32(int16 var1,int16 var2)" `327 
f N "make32" 2 700 ""
v L "var1" 2 700 "int16" `331 
v L "var2" 2 700 "int8" `332 
f B "make32" 2 700 "int32(int16 var1,int8 var2)" `330 
f N "make32" 2 701 ""
v L "var1" 2 701 "int16" `334 
v L "var2" 2 701 "int8" `335 
v L "var3" 2 701 "int8" `336 
f B "make32" 2 701 "int32(int16 var1,int8 var2,int8 var3)" `333 
f N "make32" 2 702 ""
v L "var1" 2 702 "int8" `338 
f B "make32" 2 702 "int32(int8 var1)" `337 
f N "make32" 2 703 ""
v L "var1" 2 703 "int8" `340 
v L "var2" 2 703 "int8" `341 
f B "make32" 2 703 "int32(int8 var1,int8 var2)" `339 
f N "make32" 2 704 ""
v L "var1" 2 704 "int8" `343 
v L "var2" 2 704 "int8" `344 
v L "var3" 2 704 "int8" `345 
f B "make32" 2 704 "int32(int8 var1,int8 var2,int8 var3)" `342 
f N "make32" 2 705 ""
v L "var1" 2 705 "int8" `347 
v L "var2" 2 705 "int8" `348 
v L "var3" 2 705 "int8" `349 
v L "var4" 2 705 "int8" `350 
f B "make32" 2 705 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `346 
f N "make32" 2 706 ""
v L "var1" 2 706 "int8" `352 
v L "var2" 2 706 "int16" `353 
f B "make32" 2 706 "int32(int8 var1,int16 var2)" `351 
f N "make32" 2 707 ""
v L "var1" 2 707 "int8" `355 
v L "var2" 2 707 "int16" `356 
v L "var3" 2 707 "int8" `357 
f B "make32" 2 707 "int32(int8 var1,int16 var2,int8 var3)" `354 
f N "make32" 2 708 ""
v L "var1" 2 708 "int8" `359 
v L "var2" 2 708 "int8" `360 
v L "var3" 2 708 "int16" `361 
f B "make32" 2 708 "int32(int8 var1,int8 var2,int16 var3)" `358 
f N "bit_set" 2 709 ""
v L "var" 2 709 "int8" `363 
v L "bit" 2 709 "int8" `364 
f B "bit_set" 2 709 "void(int8 var,int8 bit)" `362 
f N "bit_set" 2 710 ""
v L "var" 2 710 "int16" `366 
v L "bit" 2 710 "int8" `367 
f B "bit_set" 2 710 "void(int16 var,int8 bit)" `365 
f N "bit_set" 2 711 ""
v L "var" 2 711 "int32" `369 
v L "bit" 2 711 "int8" `370 
f B "bit_set" 2 711 "void(int32 var,int8 bit)" `368 
f N "bit_clear" 2 712 ""
v L "var" 2 712 "int8" `372 
v L "bit" 2 712 "int8" `373 
f B "bit_clear" 2 712 "void(int8 var,int8 bit)" `371 
f N "bit_clear" 2 713 ""
v L "var" 2 713 "int16" `375 
v L "bit" 2 713 "int8" `376 
f B "bit_clear" 2 713 "void(int16 var,int8 bit)" `374 
f N "bit_clear" 2 714 ""
v L "var" 2 714 "int32" `378 
v L "bit" 2 714 "int8" `379 
f B "bit_clear" 2 714 "void(int32 var,int8 bit)" `377 
f N "bit_test" 2 715 ""
v L "var" 2 715 "int8" `381 
v L "bit" 2 715 "int8" `382 
f B "bit_test" 2 715 "int8(int8 var,int8 bit)" `380 
f N "bit_test" 2 716 ""
v L "var" 2 716 "int16" `384 
v L "bit" 2 716 "int8" `385 
f B "bit_test" 2 716 "int8(int16 var,int8 bit)" `383 
f N "bit_test" 2 717 ""
v L "var" 2 717 "int32" `387 
v L "bit" 2 717 "int8" `388 
f B "bit_test" 2 717 "int8(int32 var,int8 bit)" `386  "#use delay() Prototypes:"
f N "delay_cycles" 2 720 ""
v L "count" 2 720 "int8" `390 
f B "delay_cycles" 2 720 "void(int8 count)" `389 
f N "delay_ms" 2 721 ""
v L "time" 2 721 "int16" `392 
f B "delay_ms" 2 721 "void(int16 time)" `391 
f N "delay_us" 2 722 ""
v L "time" 2 722 "int16" `394 
f B "delay_us" 2 722 "void(int16 time)" `393  "#use rs232() Prototypes:"
f N "putchar" 2 725 ""
v L "cdata" 2 725 "int8" `396 
f B "putchar" 2 725 "void(int8 cdata)" `395 
f N "putchar" 2 726 ""
v L "cdata" 2 726 "int8" `398 
v L "stream" 2 726 "int8" `399 
f B "putchar" 2 726 "void(int8 cdata,int8 stream)" `397 
f N "puts" 2 727 ""
v L "string" 2 727 "*int8" `401 
f B "puts" 2 727 "void(*int8 string)" `400 
f N "puts" 2 728 ""
v L "string" 2 728 "*int8" `403 
v L "stream" 2 728 "int8" `404 
f B "puts" 2 728 "void(*int8 string,int8 stream)" `402 
f N "getch" 2 729 ""
f B "getch" 2 729 "int8()" `405 
f N "getch" 2 730 ""
v L "stream" 2 730 "int8" `407 
f B "getch" 2 730 "int8(int8 stream)" `406 
f N "gets" 2 731 ""
v L "string" 2 731 "*int8" `409 
f B "gets" 2 731 "void(*int8 string)" `408 
f N "gets" 2 732 ""
v L "string" 2 732 "*int8" `411 
v L "stream" 2 732 "int8" `412 
f B "gets" 2 732 "void(*int8 string,int8 stream)" `410 
f N "kbhit" 2 733 ""
f B "kbhit" 2 733 "int8()" `413 
f N "kbhit" 2 734 ""
v L "stream" 2 734 "int8" `415 
f B "kbhit" 2 734 "int8(int8 stream)" `414 
f N "printf" 2 735 ""
v L "string" 2 735 "*int8" `417 
f B "printf" 2 735 "void(*int8 string,*int8 _VA_LIST)" `416 
f N "fprintf" 2 736 ""
v L "stream" 2 736 "int8" `420 
v L "string" 2 736 "*int8" `421 
f B "fprintf" 2 736 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `419 
f N "putc_send" 2 737 ""
f B "putc_send" 2 737 "void()" `423 
f N "fputc_send" 2 738 ""
v L "stream" 2 738 "int8" `425 
f B "fputc_send" 2 738 "void(int8 stream)" `424 
f N "rcv_buffer_full" 2 739 ""
f B "rcv_buffer_full" 2 739 "int8()" `426 
f N "rcv_buffer_full" 2 740 ""
v L "stream" 2 740 "int8" `428 
f B "rcv_buffer_full" 2 740 "int8(int8 stream)" `427 
f N "rcv_buffer_bytes" 2 741 ""
f B "rcv_buffer_bytes" 2 741 "int16()" `429 
f N "rcv_buffer_bytes" 2 742 ""
v L "stream" 2 742 "int8" `431 
f B "rcv_buffer_bytes" 2 742 "int16(int8 stream)" `430 
f N "tx_buffer_full" 2 743 ""
f B "tx_buffer_full" 2 743 "int8()" `432 
f N "tx_buffer_full" 2 744 ""
v L "stream" 2 744 "int8" `434 
f B "tx_buffer_full" 2 744 "int8(int8 stream)" `433 
f N "tx_buffer_bytes" 2 745 ""
f B "tx_buffer_bytes" 2 745 "int16()" `435 
f N "tx_buffer_bytes" 2 746 ""
v L "stream" 2 746 "int8" `437 
f B "tx_buffer_bytes" 2 746 "int16(int8 stream)" `436  "#use i2c() Prototypes:"
f N "i2c_read" 2 749 ""
f B "i2c_read" 2 749 "int8()" `438 
f N "i2c_read" 2 750 ""
v L "ack" 2 750 "int8" `440 
f B "i2c_read" 2 750 "int8(int8 ack)" `439 
f N "i2c_read" 2 751 ""
v L "stream" 2 751 "int8" `442 
v L "ack" 2 751 "int8" `443 
f B "i2c_read" 2 751 "int8(int8 stream,int8 ack)" `441 
f N "i2c_write" 2 752 ""
v L "data" 2 752 "int8" `445 
f B "i2c_write" 2 752 "int8(int8 data)" `444 
f N "i2c_write" 2 753 ""
v L "stream" 2 753 "int8" `447 
v L "data" 2 753 "int8" `448 
f B "i2c_write" 2 753 "int8(int8 stream,int8 data)" `446 
f N "i2c_start" 2 754 ""
f B "i2c_start" 2 754 "void()" `449 
f N "i2c_start" 2 755 ""
v L "stream" 2 755 "int8" `451 
f B "i2c_start" 2 755 "void(int8 stream)" `450 
f N "i2c_start" 2 756 ""
v L "stream" 2 756 "int8" `453 
v L "restart" 2 756 "int8" `454 
f B "i2c_start" 2 756 "void(int8 stream,int8 restart)" `452 
f N "i2c_stop" 2 757 ""
f B "i2c_stop" 2 757 "void()" `455 
f N "i2c_stop" 2 758 ""
v L "stream" 2 758 "int8" `457 
f B "i2c_stop" 2 758 "void(int8 stream)" `456 
f N "i2c_isr_state" 2 759 ""
f B "i2c_isr_state" 2 759 "int8()" `458 
f N "i2c_slaveaddr" 2 760 ""
v L "addr" 2 760 "int8" `460 
f B "i2c_slaveaddr" 2 760 "void(int8 addr)" `459 
f N "i2c_slaveaddr" 2 761 ""
v L "stream" 2 761 "int8" `462 
v L "addr" 2 761 "int8" `463 
f B "i2c_slaveaddr" 2 761 "void(int8 stream,int8 addr)" `461 
f N "i2c_poll" 2 762 ""
f B "i2c_poll" 2 762 "int8()" `464 
f N "i2c_poll" 2 763 ""
v L "stream" 2 763 "int8" `466 
f B "i2c_poll" 2 763 "int8(int8 stream)" `465 
f N "i2c_init" 2 764 ""
v L "baud" 2 764 "int32" `468 
f B "i2c_init" 2 764 "void(int32 baud)" `467 
f N "i2c_init" 2 765 ""
v L "stream" 2 765 "int8" `470 
v L "baud" 2 765 "int32" `471 
f B "i2c_init" 2 765 "void(int8 stream,int32 baud)" `469 
f N "i2c_transfer" 2 766 ""
v L "address" 2 766 "int8" `473 
v L "wData" 2 766 "*int8" `474 
v L "wCount" 2 766 "int8" `475 
f B "i2c_transfer" 2 766 "void(int8 address,*int8 wData,int8 wCount)" `472 
f N "i2c_transfer" 2 767 ""
v L "address" 2 767 "int8" `477 
v L "wData" 2 767 "*int8" `478 
v L "wCount" 2 767 "int8" `479 
v L "rData" 2 767 "*int8" `480 
v L "rCount" 2 767 "*int8" `481 
f B "i2c_transfer" 2 767 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `476 
f N "i2c_transfer" 2 768 ""
v L "stream" 2 768 "int8" `483 
v L "address" 2 768 "int8" `484 
v L "wData" 2 768 "*int8" `485 
v L "wCount" 2 768 "int8" `486 
f B "i2c_transfer" 2 768 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `482 
f N "i2c_transfer" 2 769 ""
v L "stream" 2 769 "int8" `488 
v L "address" 2 769 "int8" `489 
v L "wData" 2 769 "*int8" `490 
v L "wCount" 2 769 "int8" `491 
v L "rData" 2 769 "*int8" `492 
v L "rCount" 2 769 "*int8" `493 
f B "i2c_transfer" 2 769 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `487 
f N "i2c_transfer_out" 2 770 ""
v L "address" 2 770 "int8" `495 
v L "wData" 2 770 "*int8" `496 
v L "wCount" 2 770 "int8" `497 
f B "i2c_transfer_out" 2 770 "void(int8 address,*int8 wData,int8 wCount)" `494 
f N "i2c_transfer_out" 2 771 ""
v L "stream" 2 771 "int8" `499 
v L "address" 2 771 "int8" `500 
v L "wData" 2 771 "*int8" `501 
v L "wCount" 2 771 "int8" `502 
f B "i2c_transfer_out" 2 771 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `498 
f N "i2c_transfer_in" 2 772 ""
v L "address" 2 772 "int8" `504 
v L "rData" 2 772 "*int8" `505 
v L "rCount" 2 772 "int8" `506 
f B "i2c_transfer_in" 2 772 "void(int8 address,*int8 rData,int8 rCount)" `503 
f N "i2c_transfer_in" 2 773 ""
v L "stream" 2 773 "int8" `508 
v L "address" 2 773 "int8" `509 
v L "rData" 2 773 "*int8" `510 
v L "rCount" 2 773 "int8" `511 
f B "i2c_transfer_in" 2 773 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `507  "#use spi() Prototypes:"
f N "spi_xfer" 2 776 ""
f B "spi_xfer" 2 776 "int8()" `512 
f N "spi_xfer" 2 777 ""
f G "spi_xfer" 2 777 "int16(int8 data)" `513 
f N "spi_xfer" 2 778 ""
f G "spi_xfer" 2 778 "int32(int8 data)" `513 
f N "spi_xfer" 2 779 ""
v L "data" 2 779 "int8" `514 
f B "spi_xfer" 2 779 "int8(int8 data)" `513 
f N "spi_xfer" 2 780 ""
v L "data" 2 780 "int16" `516 
f B "spi_xfer" 2 780 "int16(int16 data)" `515 
f N "spi_xfer" 2 781 ""
v L "data" 2 781 "int32" `518 
f B "spi_xfer" 2 781 "int32(int32 data)" `517 
f N "spi_xfer" 2 782 ""
v L "stream" 2 782 "int8" `520 
v L "data" 2 782 "int8" `521 
f B "spi_xfer" 2 782 "int8(int8 stream,int8 data)" `519 
f N "spi_xfer" 2 783 ""
v L "stream" 2 783 "int8" `523 
v L "data" 2 783 "int16" `524 
f B "spi_xfer" 2 783 "int16(int8 stream,int16 data)" `522 
f N "spi_xfer" 2 784 ""
v L "stream" 2 784 "int8" `526 
v L "data" 2 784 "int32" `527 
f B "spi_xfer" 2 784 "int32(int8 stream,int32 data)" `525 
f N "spi_xfer" 2 785 ""
v L "stream" 2 785 "int8" `529 
v L "data" 2 785 "int8" `530 
v L "bits" 2 785 "int8" `531 
f B "spi_xfer" 2 785 "int8(int8 stream,int8 data,int8 bits)" `528 
f N "spi_xfer" 2 786 ""
v L "stream" 2 786 "int8" `533 
v L "data" 2 786 "int16" `534 
v L "bits" 2 786 "int8" `535 
f B "spi_xfer" 2 786 "int16(int8 stream,int16 data,int8 bits)" `532 
f N "spi_xfer" 2 787 ""
v L "stream" 2 787 "int8" `537 
v L "data" 2 787 "int32" `538 
v L "bits" 2 787 "int8" `539 
f B "spi_xfer" 2 787 "int32(int8 stream,int32 data,int8 bits)" `536 
f N "spi_init" 2 788 ""
v L "baud" 2 788 "int32" `541 
f B "spi_init" 2 788 "void(int32 baud)" `540 
f N "spi_init" 2 789 ""
v L "stream" 2 789 "int8" `543 
v L "baud" 2 789 "int32" `544 
f B "spi_init" 2 789 "void(int8 stream,int32 baud)" `542 
f N "spi_speed" 2 790 ""
v L "baud" 2 790 "int32" `546 
f B "spi_speed" 2 790 "void(int32 baud)" `545 
f N "spi_speed" 2 791 ""
v L "stream" 2 791 "int8" `548 
v L "baud" 2 791 "int32" `549 
f B "spi_speed" 2 791 "void(int8 stream,int32 baud)" `547 
f N "spi_speed" 2 792 ""
v L "stream" 2 792 "int8" `551 
v L "baud" 2 792 "int32" `552 
v L "clock" 2 792 "int32" `553 
f B "spi_speed" 2 792 "void(int8 stream,int32 baud,int32 clock)" `550 
f N "spi_prewrite" 2 793 ""
v L "data" 2 793 "int8" `555 
f B "spi_prewrite" 2 793 "void(int8 data)" `554 
f N "spi_prewrite" 2 794 ""
v L "data" 2 794 "int16" `557 
f B "spi_prewrite" 2 794 "void(int16 data)" `556 
f N "spi_prewrite" 2 795 ""
v L "data" 2 795 "int32" `559 
f B "spi_prewrite" 2 795 "void(int32 data)" `558 
f N "spi_prewrite" 2 796 ""
v L "??65535" 2 796 "int8" `561 
v L "data" 2 796 "int8" `562 
f B "spi_prewrite" 2 796 "void(int8 ,int8 data)" `560 
f N "spi_prewrite" 2 797 ""
v L "??65535" 2 797 "int8" `564 
v L "data" 2 797 "int16" `565 
f B "spi_prewrite" 2 797 "void(int8 ,int16 data)" `563 
f N "spi_prewrite" 2 798 ""
v L "??65535" 2 798 "int8" `567 
v L "data" 2 798 "int32" `568 
f B "spi_prewrite" 2 798 "void(int8 ,int32 data)" `566 
f N "spi_xfer_in" 2 799 ""
f B "spi_xfer_in" 2 799 "int8()" `569 
f N "spi_xfer_in" 2 800 ""
f G "spi_xfer_in" 2 800 "int16(int8 bits)" `570 
f N "spi_xfer_in" 2 801 ""
f G "spi_xfer_in" 2 801 "int32(int8 bits)" `570 
f N "spi_xfer_in" 2 802 ""
v L "bits" 2 802 "int8" `571 
f B "spi_xfer_in" 2 802 "int8(int8 bits)" `570 
f N "spi_xfer_in" 2 803 ""
v L "bits" 2 803 "int8" `573 
f G "spi_xfer_in" 2 803 "int16(int8 bits,int8 bits)" `572 
f N "spi_xfer_in" 2 804 ""
v L "bits" 2 804 "int8" `573 
f G "spi_xfer_in" 2 804 "int32(int8 bits,int8 bits)" `572 
f N "spi_xfer_in" 2 805 ""
v L "stream" 2 805 "int8" `573 
v L "bits" 2 805 "int8" `574 
f B "spi_xfer_in" 2 805 "int8(int8 stream,int8 bits)" `572 
f N "spi_xfer_in" 2 806 ""
v L "stream" 2 806 "int8" `573 
v L "bits" 2 806 "int8" `577 
f G "spi_xfer_in" 2 806 "int16(int8 stream,int8 bits,int8 task)" `575 
f N "spi_xfer_in" 2 807 ""
v L "stream" 2 807 "int8" `573 
v L "bits" 2 807 "int8" `577 
f G "spi_xfer_in" 2 807 "int32(int8 stream,int8 bits,int8 task)" `575  "#use rtos() Prototypes:"
f N "rtos_run" 2 810 ""
f B "rtos_run" 2 810 "void(int8 stream,int8 bits,int8 task)" `575 
f N "rtos_yield" 2 811 ""
f B "rtos_yield" 2 811 "void(int8 bits,int8 task)" `576 
f N "rtos_enable" 2 812 ""
v L "task" 2 812 "int8" `578 
f B "rtos_enable" 2 812 "void(int8 task)" `577 
f N "rtos_disable" 2 813 ""
v L "task" 2 813 "int8" `580 
f B "rtos_disable" 2 813 "void(int8 task)" `579 
f N "rtos_terminate" 2 814 ""
f B "rtos_terminate" 2 814 "void()" `581 
f N "rtos_await" 2 815 ""
v L "flag" 2 815 "int8" `583 
f B "rtos_await" 2 815 "void(int8 flag)" `582 
f N "rtos_wait" 2 816 ""
v L "sem" 2 816 "int8" `585 
f B "rtos_wait" 2 816 "void(int8 sem)" `584 
f N "rtos_signal" 2 817 ""
v L "sem" 2 817 "int8" `587 
f B "rtos_signal" 2 817 "void(int8 sem)" `586 
f N "rtos_msg_send" 2 818 ""
v L "task" 2 818 "int8" `589 
v L "msg" 2 818 "int8" `590 
f B "rtos_msg_send" 2 818 "void(int8 task,int8 msg)" `588 
f N "rtos_msg_read" 2 819 ""
f B "rtos_msg_read" 2 819 "int8()" `591 
f N "rtos_msg_poll" 2 820 ""
f B "rtos_msg_poll" 2 820 "int8()" `592 
f N "rtos_overrun" 2 821 ""
v L "task" 2 821 "int8" `594 
f B "rtos_overrun" 2 821 "int8(int8 task)" `593 
f N "rtos_stats" 2 822 ""
v L "task" 2 822 "int8" `596 
v L "stat" 2 822 "*int8" `597 
f B "rtos_stats" 2 822 "void(int8 task,*int8 stat)" `595  "#use timer() Prototypes:"
f N "get_ticks" 2 825 ""
f B "get_ticks" 2 825 "int8()" `598 
f N "get_ticks" 2 826 ""
f G "get_ticks" 2 826 "int16(int8 stream)" `599 
f N "get_ticks" 2 827 ""
f G "get_ticks" 2 827 "int32(int8 stream)" `599 
f N "get_ticks" 2 828 ""
v L "stream" 2 828 "int8" `600 
f B "get_ticks" 2 828 "int8(int8 stream)" `599 
f N "get_ticks" 2 829 ""
v L "stream" 2 829 "int8" `602 
f G "get_ticks" 2 829 "int16(int8 stream)" `601 
f N "get_ticks" 2 830 ""
v L "stream" 2 830 "int8" `602 
f G "get_ticks" 2 830 "int32(int8 stream)" `601 
f N "set_ticks" 2 831 ""
v L "value" 2 831 "int8" `602 
f B "set_ticks" 2 831 "void(int8 value)" `601 
f N "set_ticks" 2 832 ""
v L "value" 2 832 "int16" `604 
f B "set_ticks" 2 832 "void(int16 value)" `603 
f N "set_ticks" 2 833 ""
v L "value" 2 833 "int32" `606 
f B "set_ticks" 2 833 "void(int32 value)" `605 
f N "set_ticks" 2 834 ""
v L "stream" 2 834 "int8" `608 
v L "value" 2 834 "int8" `609 
f B "set_ticks" 2 834 "void(int8 stream,int8 value)" `607 
f N "set_ticks" 2 835 ""
v L "stream" 2 835 "int8" `611 
v L "value" 2 835 "int16" `612 
f B "set_ticks" 2 835 "void(int8 stream,int16 value)" `610 
f N "set_ticks" 2 836 ""
v L "stream" 2 836 "int8" `614 
v L "value" 2 836 "int32" `615 
f B "set_ticks" 2 836 "void(int8 stream,int32 value)" `613  "#use pwm() Prototypes:"
f N "pwm_on" 2 839 ""
f B "pwm_on" 2 839 "void()" `616 
f N "pwm_on" 2 840 ""
v L "stream" 2 840 "int8" `618 
f B "pwm_on" 2 840 "void(int8 stream)" `617 
f N "pwm_off" 2 841 ""
f B "pwm_off" 2 841 "void()" `619 
f N "pwm_off" 2 842 ""
v L "stream" 2 842 "int8" `621 
f B "pwm_off" 2 842 "void(int8 stream)" `620 
f N "pwm_set_duty" 2 843 ""
v L "duty" 2 843 "int16" `623 
f B "pwm_set_duty" 2 843 "void(int16 duty)" `622 
f N "pwm_set_duty" 2 844 ""
v L "stream" 2 844 "int8" `625 
v L "duty" 2 844 "int16" `626 
f B "pwm_set_duty" 2 844 "void(int8 stream,int16 duty)" `624 
f N "pwm_set_duty_percent" 2 845 ""
v L "percent" 2 845 "int16" `628 
f B "pwm_set_duty_percent" 2 845 "void(int16 percent)" `627 
f N "pwm_set_duty_percent" 2 846 ""
v L "stream" 2 846 "int8" `630 
v L "percent" 2 846 "int16" `631 
f B "pwm_set_duty_percent" 2 846 "void(int8 stream,int16 percent)" `629 
f N "pwm_set_frequency" 2 847 ""
v L "frequency" 2 847 "int32" `633 
f B "pwm_set_frequency" 2 847 "void(int32 frequency)" `632 
f N "pwm_set_frequency" 2 848 ""
v L "stream" 2 848 "int8" `635 
v L "frequency" 2 848 "int32" `636 
f B "pwm_set_frequency" 2 848 "void(int8 stream,int32 frequency)" `634  "#use capture() Prototypes:"
f N "get_capture_time" 2 851 ""
f B "get_capture_time" 2 851 "int16()" `637 
f N "get_capture_time" 2 852 ""
v L "stream" 2 852 "int8" `639 
f B "get_capture_time" 2 852 "int16(int8 stream)" `638 
f N "get_capture_event" 2 853 ""
f B "get_capture_event" 2 853 "int8()" `640 
f N "get_capture_event" 2 854 ""
v L "stream" 2 854 "int8" `642 
f B "get_capture_event" 2 854 "int8(int8 stream)" `641  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 867 ""
v L "address" 2 867 "int16" `644 
f B "goto_address" 2 867 "void(int16 address)" `643 
f N "label_address" 2 868 ""
v L "label" 2 868 "int16" `646 
f B "label_address" 2 868 "int16(int16 label)" `645  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 871 ""
v L "address" 2 871 "int16" `648 
v L "dataptr" 2 871 "*int8" `649 
v L "count" 2 871 "int16" `650 
f B "read_program_memory" 2 871 "void(int16 address,*int8 dataptr,int16 count)" `647 
f N "read_program_eeprom" 2 872 ""
v L "address" 2 872 "int16" `652 
f B "read_program_eeprom" 2 872 "int16(int16 address)" `651 
f N "read_configuration_memory" 2 873 ""
v L "dataptr" 2 873 "*int8" `654 
v L "count" 2 873 "int8" `655 
f B "read_configuration_memory" 2 873 "void(*int8 dataptr,int8 count)" `653 
f N "read_configuration_memory" 2 874 ""
v L "offset" 2 874 "int8" `657 
v L "dataptr" 2 874 "*int8" `658 
v L "count" 2 874 "int8" `659 
f B "read_configuration_memory" 2 874 "void(int8 offset,*int8 dataptr,int8 count)" `656  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 877 ""
v L "address" 2 877 "int16" `661 
v L "dataptr" 2 877 "*int8" `662 
v L "count" 2 877 "int16" `663 
f B "write_program_memory" 2 877 "void(int16 address,*int8 dataptr,int16 count)" `660 
f N "write_program_eeprom" 2 878 ""
v L "address" 2 878 "int16" `665 
v L "data" 2 878 "int16" `666 
f B "write_program_eeprom" 2 878 "void(int16 address,int16 data)" `664 
f N "write_configuration_memory" 2 879 ""
v L "dataptr" 2 879 "*int8" `668 
v L "count" 2 879 "int8" `669 
f B "write_configuration_memory" 2 879 "void(*int8 dataptr,int8 count)" `667 
f N "write_configuration_memory" 2 880 ""
v L "offset" 2 880 "int8" `671 
v L "dataptr" 2 880 "*int8" `672 
v L "count" 2 880 "int8" `673 
f B "write_configuration_memory" 2 880 "void(int8 offset,*int8 dataptr,int8 count)" `670  "INT"
c L "write_configuration_memory" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 887 ""
v L "interrupt" 2 887 "int32" `675 
f B "enable_interrupts" 2 887 "void(int32 interrupt)" `674 
f N "disable_interrupts" 2 888 ""
v L "interrupt" 2 888 "int32" `677 
f B "disable_interrupts" 2 888 "void(int32 interrupt)" `676 
f N "clear_interrupt" 2 889 ""
v L "interrupt" 2 889 "int32" `679 
f B "clear_interrupt" 2 889 "void(int32 interrupt)" `678 
f N "interrupt_active" 2 890 ""
v L "interrupt" 2 890 "int32" `681 
f B "interrupt_active" 2 890 "int8(int32 interrupt)" `680 
f N "interrupt_enabled" 2 891 ""
v L "interrupt" 2 891 "int32" `683 
f B "interrupt_enabled" 2 891 "int8(int32 interrupt)" `682 
f N "ext_int_edge" 2 892 ""
v L "source" 2 892 "int8" `685 
v L "edge" 2 892 "int8" `686 
f B "ext_int_edge" 2 892 "void(int8 source,int8 edge)" `684 
f N "jump_to_isr" 2 893 ""
v L "address" 2 893 "int16" `688 
f B "jump_to_isr" 2 893 "void(int16 address)" `687  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 895 "0x40"
d G "H_TO_L" 2 896 "0"
d G "GLOBAL" 2 898 "0x0BC0"
d G "PERIPH" 2 899 "0x0B40"
d G "INT_EXT_L2H" 2 900 "0x50000B10"
d G "INT_EXT_H2L" 2 901 "0x60000B10"
d G "INT_EXT" 2 902 "0x300B10"
d G "INT_TIMER0" 2 903 "0x300B20"
d G "INT_TIMER1" 2 904 "0x309101"
d G "INT_TIMER2" 2 905 "0x309102"
d G "INT_SSP" 2 906 "0x309108"
d G "INT_TBE" 2 907 "0x309110"
d G "INT_RDA" 2 908 "0x309120"
d G "INT_AD" 2 909 "0x309140"
d G "INT_TIMER1_GATE" 2 910 "0x309180"
d G "INT_BUSCOL" 2 911 "0x309208"
d G "INT_COMP" 2 912 "0x309220"
d G "INT_COMP2" 2 913 "0x309240"
d G "INT_OSC_FAIL" 2 914 "0x309280"
d G "INT_NCO" 2 915 "0x309204"
d G "INT_CLC" 2 916 "0x309301"
d G "INT_CLC2" 2 917 "0x309302"
d G "INT_CLC3" 2 918 "0x309304"
d G "INT_CLC4" 2 919 "0x309308"
d G "INT_IOC" 2 920 "0x3FFF0B08"
d G "INT_IOC_A0" 2 921 "0x30010B08"
d G "INT_IOC_A0_L2H" 2 922 "0x10010B08"
d G "INT_IOC_A0_H2L" 2 923 "0x20010B08"
d G "INT_IOC_A1" 2 924 "0x30020B08"
d G "INT_IOC_A1_L2H" 2 925 "0x10020B08"
d G "INT_IOC_A1_H2L" 2 926 "0x20020B08"
d G "INT_IOC_A2" 2 927 "0x30040B08"
d G "INT_IOC_A2_L2H" 2 928 "0x10040B08"
d G "INT_IOC_A2_H2L" 2 929 "0x20040B08"
d G "INT_IOC_A3" 2 930 "0x30080B08"
d G "INT_IOC_A3_L2H" 2 931 "0x10080B08"
d G "INT_IOC_A3_H2L" 2 932 "0x20080B08"
d G "INT_IOC_A4" 2 933 "0x30100B08"
d G "INT_IOC_A4_L2H" 2 934 "0x10100B08"
d G "INT_IOC_A4_H2L" 2 935 "0x20100B08"
d G "INT_IOC_A5" 2 936 "0x30200B08"
d G "INT_IOC_A5_L2H" 2 937 "0x10200B08"
d G "INT_IOC_A5_H2L" 2 938 "0x20200B08"
d G "INT_IOC_B4" 2 939 "0x31100B08"
d G "INT_IOC_B4_L2H" 2 940 "0x11100B08"
d G "INT_IOC_B4_H2L" 2 941 "0x21100B08"
d G "INT_IOC_B5" 2 942 "0x31200B08"
d G "INT_IOC_B5_L2H" 2 943 "0x11200B08"
d G "INT_IOC_B5_H2L" 2 944 "0x21200B08"
d G "INT_IOC_B6" 2 945 "0x31400B08"
d G "INT_IOC_B6_L2H" 2 946 "0x11400B08"
d G "INT_IOC_B6_H2L" 2 947 "0x21400B08"
d G "INT_IOC_B7" 2 948 "0x31800B08"
d G "INT_IOC_B7_L2H" 2 949 "0x11800B08"
d G "INT_IOC_B7_H2L" 2 950 "0x21800B08"
d G "INT_RA" 2 957 "0x30FF0B08"
d G "INT_RA0" 2 958 "0x30010B08"
d G "INT_RA0_L2H" 2 959 "0x10010B08"
d G "INT_RA0_H2L" 2 960 "0x20010B08"
d G "INT_RA1" 2 961 "0x30020B08"
d G "INT_RA1_L2H" 2 962 "0x10020B08"
d G "INT_RA1_H2L" 2 963 "0x20020B08"
d G "INT_RA2" 2 964 "0x30040B08"
d G "INT_RA2_L2H" 2 965 "0x10040B08"
d G "INT_RA2_H2L" 2 966 "0x20040B08"
d G "INT_RA3" 2 967 "0x30080B08"
d G "INT_RA3_L2H" 2 968 "0x10080B08"
d G "INT_RA3_H2L" 2 969 "0x20080B08"
d G "INT_RA4" 2 970 "0x30100B08"
d G "INT_RA4_L2H" 2 971 "0x10100B08"
d G "INT_RA4_H2L" 2 972 "0x20100B08"
d G "INT_RA5" 2 973 "0x30200B08"
d G "INT_RA5_L2H" 2 974 "0x10200B08"
d G "INT_RA5_H2L" 2 975 "0x20200B08"
d G "INT_RB" 2 976 "0x30FF0B08"
d G "INT_RB4" 2 977 "0x31100B08"
d G "INT_RB4_L2H" 2 978 "0x11100B08"
d G "INT_RB4_H2L" 2 979 "0x21100B08"
d G "INT_RB5" 2 980 "0x31200B08"
d G "INT_RB5_L2H" 2 981 "0x11200B08"
d G "INT_RB5_H2L" 2 982 "0x21200B08"
d G "INT_RB6" 2 983 "0x31400B08"
d G "INT_RB6_L2H" 2 984 "0x11400B08"
d G "INT_RB6_H2L" 2 985 "0x21400B08"
d G "INT_RB7" 2 986 "0x31800B08"
d G "INT_RB7_L2H" 2 987 "0x11800B08"
d G "INT_RB7_H2L" 2 988 "0x21800B08"
D G "LCD_ENABLE_PIN" 1 5 "PIN_C2"
D G "LCD_RS_PIN" 1 6 "PIN_C0"
D G "LCD_RW_PIN" 1 7 "PIN_C1"
D G "LCD_DATA4" 1 8 "PIN_C3"
D G "LCD_DATA5" 1 9 "PIN_C4"
D G "LCD_DATA6" 1 10 "PIN_C5"
D G "LCD_DATA7" 1 11 "PIN_C6"
D G "__LCD_C__" 3 76 ""
C L "jump_to_isr" 3 2 2 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 1 "FUNCTION"
C L "jump_to_isr" 3 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 3 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `699  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 3 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 3 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 3 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 3 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 3 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 3 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 3 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 3 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 3 187 "20"
F N "lcd_read_nibble" 3 190 ""
f G "lcd_read_nibble" 3 190 "int8()" `700 
F N "lcd_read_byte" 3 192 ""
F G "lcd_read_byte" 3 193 "int8()" `701 
V L "low" 3 194 "int8" `702 
V L "high" 3 194 "int8" `703 
F N "lcd_read_nibble" 3 239 ""
F G "lcd_read_nibble" 3 240 "int8()" `700 
V L "n" 3 242 "int8" `704 
C L "lcd_read_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_nibble" 3 256 ""
V L "n" 3 256 "int8" `706 
F G "lcd_send_nibble" 3 257 "void(int8 n)" `705 
C L "lcd_send_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_byte" 3 274 ""
V L "address" 3 274 "int8" `708 
V L "n" 3 274 "int8" `709 
F G "lcd_send_byte" 3 275 "void(int8 address,int8 n)" `707 
F N "lcd_init" 3 299 ""
F G "lcd_init" 3 300 "void()" `710 
V L "i" 3 301 "int8" `711 
V L "LCD_INIT_STRING" 3 302 "int8[4]" `712 
C L "lcd_init" 3 2 2 "FUNCTION"
F N "lcd_gotoxy" 3 345 ""
V L "x" 3 345 "int8" `714 
V L "y" 3 345 "int8" `715 
F G "lcd_gotoxy" 3 346 "void(int8 x,int8 y)" `713 
V L "address" 3 347 "int8" `716 
F N "lcd_putc" 3 363 ""
V L "c" 3 363 "int8" `718 
F G "lcd_putc" 3 364 "void(int8 c)" `717 
F N "lcd_getc" 3 406 ""
V L "x" 3 406 "int8" `720 
V L "y" 3 406 "int8" `721 
F G "lcd_getc" 3 407 "int8(int8 x,int8 y)" `719 
V L "value" 3 408 "int8" `722 
C L "lcd_getc" 3 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 3 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 3 424 ""
V L "which" 3 424 "int8" `724 
V L "ptr" 3 424 "*int8" `725 
F G "lcd_set_cgram_char" 3 425 "void(int8 which,*int8 ptr)" `723 
V L "i" 3 426 "int8" `726 
C L "lcd_set_cgram_char" 3 2 1 "FUNCTION"
F N "lcd_cursor_on" 3 443 ""
V L "on" 3 443 "int8" `728 
F G "lcd_cursor_on" 3 444 "void(int8 on)" `727 
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
D G "VREF" 1 13 "PIN_A0"
V G "value" 0 2 "float" `729 
F N "MAIN" 0 4 ""
F G "MAIN" 0 5 "void()" `730 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_pwm1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_pwm2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_pwm3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_pwm4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "setup_clc2" 1 0
F B "clc2_setup_gate" 2 0
F B "clc2_setup_input" 2 0
F B "setup_clc3" 1 0
F B "clc3_setup_gate" 2 0
F B "clc3_setup_input" 2 0
F B "setup_clc4" 1 0
F B "clc4_setup_gate" 2 0
F B "clc4_setup_input" 2 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
