CCS PCM C Compiler, Version 5.078, 43599               30-Apr-22 17:29

               Filename:   E:\Nam_2\ViXuLi\CCS\Reading_LM35\main.lst

               ROM used:   1301 words (16%)
                           Largest free fragment is 2048
               RAM used:   13 (3%) at main() level
                           56 (11%) worst case
               Stack used: 4 locations
               Stack size: 16

*
0000:  MOVLP  00
0001:  GOTO   497
0002:  NOP
.................... #include <main.h> 
.................... #include <16F1509.h> 
.................... //////////// Standard Header file for the PIC16F1509 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F1509 
0003:  DATA 54,39
0004:  DATA 6F,37
0005:  DATA 67,10
0006:  DATA 32,18
0007:  DATA 31,1A
0008:  DATA B6,18
0009:  DATA B0,1B
000A:  DATA 00,00
000B:  DATA D4,32
000C:  DATA 6D,38
000D:  DATA A0,1E
000E:  DATA A0,12
000F:  DATA AE,18
0010:  DATA 66,10
0011:  DATA 43,00
*
0130:  MOVLW  8E
0131:  MOVWF  77
0132:  MOVF   29,W
0133:  MOVWF  78
0134:  MOVF   28,W
0135:  MOVWF  79
0136:  CLRF   7A
0137:  MOVF   78,F
0138:  BTFSS  03.2
0139:  GOTO   144
013A:  MOVF   79,W
013B:  MOVWF  78
013C:  CLRF   79
013D:  MOVLW  08
013E:  SUBWF  77,F
013F:  MOVF   78,F
0140:  BTFSS  03.2
0141:  GOTO   144
0142:  CLRF   77
0143:  GOTO   14C
0144:  BCF    03.0
0145:  BTFSC  78.7
0146:  GOTO   14B
0147:  RLF    79,F
0148:  RLF    78,F
0149:  DECF   77,F
014A:  GOTO   144
014B:  BCF    78.7
014C:  MOVLP  00
014D:  GOTO   4CD (RETURN)
014E:  MOVF   28,W
014F:  BTFSC  03.2
0150:  GOTO   213
0151:  MOVWF  38
0152:  MOVF   2C,W
0153:  BTFSC  03.2
0154:  GOTO   213
0155:  SUBWF  38,F
0156:  BTFSS  03.0
0157:  GOTO   15D
0158:  MOVLW  7F
0159:  ADDWF  38,F
015A:  BTFSC  03.0
015B:  GOTO   213
015C:  GOTO   163
015D:  MOVLW  81
015E:  SUBWF  38,F
015F:  BTFSS  03.0
0160:  GOTO   213
0161:  BTFSC  03.2
0162:  GOTO   213
0163:  MOVF   38,W
0164:  MOVWF  77
0165:  CLRF   78
0166:  CLRF   79
0167:  CLRF   7A
0168:  CLRF   37
0169:  MOVF   29,W
016A:  MOVWF  36
016B:  BSF    36.7
016C:  MOVF   2A,W
016D:  MOVWF  35
016E:  MOVF   2B,W
016F:  MOVWF  34
0170:  MOVLW  19
0171:  MOVWF  38
0172:  MOVF   2F,W
0173:  SUBWF  34,F
0174:  BTFSC  03.0
0175:  GOTO   186
0176:  MOVLW  01
0177:  SUBWF  35,F
0178:  BTFSC  03.0
0179:  GOTO   186
017A:  SUBWF  36,F
017B:  BTFSC  03.0
017C:  GOTO   186
017D:  SUBWF  37,F
017E:  BTFSC  03.0
017F:  GOTO   186
0180:  INCF   37,F
0181:  INCF   36,F
0182:  INCF   35,F
0183:  MOVF   2F,W
0184:  ADDWF  34,F
0185:  GOTO   1B8
0186:  MOVF   2E,W
0187:  SUBWF  35,F
0188:  BTFSC  03.0
0189:  GOTO   1A1
018A:  MOVLW  01
018B:  SUBWF  36,F
018C:  BTFSC  03.0
018D:  GOTO   1A1
018E:  SUBWF  37,F
018F:  BTFSC  03.0
0190:  GOTO   1A1
0191:  INCF   37,F
0192:  INCF   36,F
0193:  MOVF   2E,W
0194:  ADDWF  35,F
0195:  MOVF   2F,W
0196:  ADDWF  34,F
0197:  BTFSS  03.0
0198:  GOTO   1B8
0199:  INCF   35,F
019A:  BTFSS  03.2
019B:  GOTO   1B8
019C:  INCF   36,F
019D:  BTFSS  03.2
019E:  GOTO   1B8
019F:  INCF   37,F
01A0:  GOTO   1B8
01A1:  MOVF   2D,W
01A2:  IORLW  80
01A3:  SUBWF  36,F
01A4:  BTFSC  03.0
01A5:  GOTO   1B7
01A6:  MOVLW  01
01A7:  SUBWF  37,F
01A8:  BTFSC  03.0
01A9:  GOTO   1B7
01AA:  INCF   37,F
01AB:  MOVF   2D,W
01AC:  IORLW  80
01AD:  ADDWF  36,F
01AE:  MOVF   2E,W
01AF:  ADDWF  35,F
01B0:  BTFSS  03.0
01B1:  GOTO   195
01B2:  INCF   36,F
01B3:  BTFSS  03.2
01B4:  GOTO   195
01B5:  INCF   37,F
01B6:  GOTO   195
01B7:  BSF    7A.0
01B8:  DECFSZ 38,F
01B9:  GOTO   1BB
01BA:  GOTO   1C6
01BB:  BCF    03.0
01BC:  RLF    34,F
01BD:  RLF    35,F
01BE:  RLF    36,F
01BF:  RLF    37,F
01C0:  BCF    03.0
01C1:  RLF    7A,F
01C2:  RLF    79,F
01C3:  RLF    78,F
01C4:  RLF    39,F
01C5:  GOTO   172
01C6:  BTFSS  39.0
01C7:  GOTO   1CE
01C8:  BCF    03.0
01C9:  RRF    78,F
01CA:  RRF    79,F
01CB:  RRF    7A,F
01CC:  RRF    39,F
01CD:  GOTO   1D1
01CE:  DECF   77,F
01CF:  BTFSC  03.2
01D0:  GOTO   213
01D1:  BTFSC  39.7
01D2:  GOTO   1FA
01D3:  BCF    03.0
01D4:  RLF    34,F
01D5:  RLF    35,F
01D6:  RLF    36,F
01D7:  RLF    37,F
01D8:  MOVF   2F,W
01D9:  SUBWF  34,F
01DA:  BTFSC  03.0
01DB:  GOTO   1E6
01DC:  MOVLW  01
01DD:  SUBWF  35,F
01DE:  BTFSC  03.0
01DF:  GOTO   1E6
01E0:  SUBWF  36,F
01E1:  BTFSC  03.0
01E2:  GOTO   1E6
01E3:  SUBWF  37,F
01E4:  BTFSS  03.0
01E5:  GOTO   209
01E6:  MOVF   2E,W
01E7:  SUBWF  35,F
01E8:  BTFSC  03.0
01E9:  GOTO   1F1
01EA:  MOVLW  01
01EB:  SUBWF  36,F
01EC:  BTFSC  03.0
01ED:  GOTO   1F1
01EE:  SUBWF  37,F
01EF:  BTFSS  03.0
01F0:  GOTO   209
01F1:  MOVF   2D,W
01F2:  IORLW  80
01F3:  SUBWF  36,F
01F4:  BTFSC  03.0
01F5:  GOTO   1FA
01F6:  MOVLW  01
01F7:  SUBWF  37,F
01F8:  BTFSS  03.0
01F9:  GOTO   209
01FA:  INCF   7A,F
01FB:  BTFSS  03.2
01FC:  GOTO   209
01FD:  INCF   79,F
01FE:  BTFSS  03.2
01FF:  GOTO   209
0200:  INCF   78,F
0201:  BTFSS  03.2
0202:  GOTO   209
0203:  INCF   77,F
0204:  BTFSC  03.2
0205:  GOTO   213
0206:  RRF    78,F
0207:  RRF    79,F
0208:  RRF    7A,F
0209:  MOVF   29,W
020A:  MOVWF  38
020B:  MOVF   2D,W
020C:  XORWF  38,F
020D:  BTFSS  38.7
020E:  GOTO   211
020F:  BSF    78.7
0210:  GOTO   217
0211:  BCF    78.7
0212:  GOTO   217
0213:  CLRF   77
0214:  CLRF   78
0215:  CLRF   79
0216:  CLRF   7A
0217:  MOVLP  00
0218:  GOTO   4DE (RETURN)
*
0259:  MOVF   0B,W
025A:  BCF    0B.7
025B:  MOVLB  03
025C:  BSF    15.7
025D:  BSF    15.0
025E:  NOP
025F:  NOP
0260:  BTFSC  09.7
0261:  BSF    0B.7
0262:  MOVF   13,W
0263:  ANDLW  7F
0264:  BTFSC  03.2
0265:  GOTO   2A1
0266:  MOVLB  00
0267:  MOVWF  28
0268:  MOVLB  03
0269:  MOVF   11,W
026A:  MOVLB  00
026B:  MOVWF  29
026C:  MOVLB  03
026D:  MOVF   12,W
026E:  MOVLB  00
026F:  MOVWF  2A
0270:  MOVF   28,W
0271:  MOVWF  38
0272:  CALL   22B
0273:  MOVF   29,W
0274:  MOVLB  03
0275:  MOVWF  11
0276:  MOVLB  00
0277:  MOVF   2A,W
0278:  MOVLB  03
0279:  MOVWF  12
027A:  MOVF   0B,W
027B:  BCF    0B.7
027C:  BSF    15.7
027D:  BSF    15.0
027E:  NOP
027F:  NOP
0280:  BTFSC  09.7
0281:  BSF    0B.7
0282:  RLF    13,W
0283:  RLF    14,W
0284:  ANDLW  7F
0285:  BTFSC  03.2
0286:  GOTO   2A1
0287:  MOVLB  00
0288:  MOVWF  28
0289:  MOVLB  03
028A:  MOVF   11,W
028B:  MOVLB  00
028C:  MOVWF  29
028D:  MOVLB  03
028E:  MOVF   12,W
028F:  MOVLB  00
0290:  MOVWF  2A
0291:  MOVF   28,W
0292:  MOVWF  38
0293:  CALL   22B
0294:  MOVF   29,W
0295:  MOVLB  03
0296:  MOVWF  11
0297:  MOVLB  00
0298:  MOVF   2A,W
0299:  MOVLB  03
029A:  MOVWF  12
029B:  INCF   11,F
029C:  BTFSC  03.2
029D:  INCF   12,F
029E:  MOVLB  00
029F:  GOTO   259
02A0:  MOVLB  03
02A1:  MOVLP  00
02A2:  MOVLB  00
02A3:  GOTO   4F1 (RETURN)
02A4:  MOVF   0B,W
02A5:  BCF    0B.7
02A6:  MOVLB  03
02A7:  BSF    15.7
02A8:  BSF    15.0
02A9:  NOP
02AA:  NOP
02AB:  BTFSC  09.7
02AC:  BSF    0B.7
02AD:  BTFSC  03.0
02AE:  GOTO   2D5
02AF:  MOVF   13,W
02B0:  ANDLW  7F
02B1:  MOVLB  00
02B2:  MOVWF  28
02B3:  MOVLB  03
02B4:  MOVF   11,W
02B5:  MOVLB  00
02B6:  MOVWF  29
02B7:  MOVLB  03
02B8:  MOVF   12,W
02B9:  MOVLB  00
02BA:  MOVWF  2A
02BB:  MOVF   28,W
02BC:  MOVWF  38
02BD:  CALL   22B
02BE:  MOVF   29,W
02BF:  MOVLB  03
02C0:  MOVWF  11
02C1:  MOVLB  00
02C2:  MOVF   2A,W
02C3:  MOVLB  03
02C4:  MOVWF  12
02C5:  MOVF   0B,W
02C6:  BCF    0B.7
02C7:  BSF    15.7
02C8:  BSF    15.0
02C9:  NOP
02CA:  NOP
02CB:  BTFSC  09.7
02CC:  BSF    0B.7
02CD:  MOVLB  00
02CE:  DECFSZ 26,F
02CF:  GOTO   2D1
02D0:  GOTO   2D3
02D1:  MOVLB  03
02D2:  GOTO   2D5
02D3:  GOTO   2F3
02D4:  MOVLB  03
02D5:  RLF    13,W
02D6:  RLF    14,W
02D7:  ANDLW  7F
02D8:  MOVLB  00
02D9:  MOVWF  28
02DA:  MOVLB  03
02DB:  MOVF   11,W
02DC:  MOVLB  00
02DD:  MOVWF  29
02DE:  MOVLB  03
02DF:  MOVF   12,W
02E0:  MOVLB  00
02E1:  MOVWF  2A
02E2:  MOVF   28,W
02E3:  MOVWF  38
02E4:  CALL   22B
02E5:  MOVF   29,W
02E6:  MOVLB  03
02E7:  MOVWF  11
02E8:  MOVLB  00
02E9:  MOVF   2A,W
02EA:  MOVLB  03
02EB:  MOVWF  12
02EC:  INCF   11,F
02ED:  BTFSC  03.2
02EE:  INCF   12,F
02EF:  BCF    03.0
02F0:  MOVLB  00
02F1:  DECFSZ 26,F
02F2:  GOTO   2A4
02F3:  MOVLP  00
02F4:  GOTO   500 (RETURN)
02F5:  BTFSC  03.1
02F6:  GOTO   2FB
02F7:  MOVLW  20
02F8:  MOVWF  05
02F9:  MOVLW  23
02FA:  MOVWF  04
02FB:  CLRF   77
02FC:  CLRF   78
02FD:  CLRF   79
02FE:  CLRF   7A
02FF:  CLRF   43
0300:  CLRF   44
0301:  CLRF   45
0302:  CLRF   46
0303:  MOVF   3F,W
0304:  IORWF  3E,W
0305:  IORWF  3D,W
0306:  IORWF  3C,W
0307:  BTFSC  03.2
0308:  GOTO   339
0309:  MOVLW  20
030A:  MOVWF  47
030B:  BCF    03.0
030C:  RLF    38,F
030D:  RLF    39,F
030E:  RLF    3A,F
030F:  RLF    3B,F
0310:  RLF    43,F
0311:  RLF    44,F
0312:  RLF    45,F
0313:  RLF    46,F
0314:  MOVF   3F,W
0315:  SUBWF  46,W
0316:  BTFSS  03.2
0317:  GOTO   322
0318:  MOVF   3E,W
0319:  SUBWF  45,W
031A:  BTFSS  03.2
031B:  GOTO   322
031C:  MOVF   3D,W
031D:  SUBWF  44,W
031E:  BTFSS  03.2
031F:  GOTO   322
0320:  MOVF   3C,W
0321:  SUBWF  43,W
0322:  BTFSS  03.0
0323:  GOTO   333
0324:  MOVF   3C,W
0325:  SUBWF  43,F
0326:  MOVF   3D,W
0327:  BTFSS  03.0
0328:  INCFSZ 3D,W
0329:  SUBWF  44,F
032A:  MOVF   3E,W
032B:  BTFSS  03.0
032C:  INCFSZ 3E,W
032D:  SUBWF  45,F
032E:  MOVF   3F,W
032F:  BTFSS  03.0
0330:  INCFSZ 3F,W
0331:  SUBWF  46,F
0332:  BSF    03.0
0333:  RLF    77,F
0334:  RLF    78,F
0335:  RLF    79,F
0336:  RLF    7A,F
0337:  DECFSZ 47,F
0338:  GOTO   30B
0339:  MOVF   43,W
033A:  MOVWF  00
033B:  MOVF   44,W
033C:  MOVWI  W,[FSR0+01]
033D:  MOVF   45,W
033E:  MOVWI  W,[FSR0+02]
033F:  MOVF   46,W
0340:  MOVWI  W,[FSR0+03]
0341:  RETURN
0342:  MOVF   04,W
0343:  MOVWF  30
0344:  MOVF   2A,W
0345:  MOVWF  32
0346:  BTFSC  03.2
0347:  GOTO   3D4
0348:  MOVF   29,W
0349:  MOVWF  3B
034A:  MOVF   28,W
034B:  MOVWF  3A
034C:  MOVF   27,W
034D:  MOVWF  39
034E:  MOVF   26,W
034F:  MOVWF  38
0350:  CLRF   3F
0351:  CLRF   3E
0352:  MOVLW  20
0353:  MOVWF  3D
0354:  MOVLW  82
0355:  MOVWF  3C
0356:  MOVF   38,W
0357:  BTFSC  03.2
0358:  GOTO   3C6
0359:  MOVWF  43
035A:  MOVF   3C,W
035B:  BTFSC  03.2
035C:  GOTO   3C6
035D:  ADDWF  43,F
035E:  BTFSC  03.0
035F:  GOTO   367
0360:  MOVLW  7F
0361:  SUBWF  43,F
0362:  BTFSS  03.0
0363:  GOTO   3C6
0364:  BTFSC  03.2
0365:  GOTO   3C6
0366:  GOTO   36B
0367:  MOVLW  81
0368:  ADDWF  43,F
0369:  BTFSC  03.0
036A:  GOTO   3C6
036B:  MOVF   43,W
036C:  MOVWF  77
036D:  CLRF   78
036E:  CLRF   79
036F:  CLRF   7A
0370:  MOVF   39,W
0371:  MOVWF  47
0372:  BSF    47.7
0373:  MOVF   3A,W
0374:  MOVWF  46
0375:  MOVF   3B,W
0376:  MOVWF  45
0377:  MOVLW  18
0378:  MOVWF  43
0379:  CLRF   44
037A:  BTFSS  45.0
037B:  GOTO   394
037C:  MOVF   3F,W
037D:  ADDWF  7A,F
037E:  BTFSS  03.0
037F:  GOTO   386
0380:  INCF   79,F
0381:  BTFSS  03.2
0382:  GOTO   386
0383:  INCF   78,F
0384:  BTFSC  03.2
0385:  BSF    44.7
0386:  MOVF   3E,W
0387:  ADDWF  79,F
0388:  BTFSS  03.0
0389:  GOTO   38D
038A:  INCF   78,F
038B:  BTFSC  03.2
038C:  BSF    44.7
038D:  MOVF   3D,W
038E:  MOVWF  3A
038F:  BSF    3A.7
0390:  MOVF   3A,W
0391:  ADDWF  78,F
0392:  BTFSC  03.0
0393:  BSF    44.7
0394:  RLF    44,F
0395:  RRF    78,F
0396:  RRF    79,F
0397:  RRF    7A,F
0398:  RRF    47,F
0399:  RRF    46,F
039A:  RRF    45,F
039B:  BCF    03.0
039C:  DECFSZ 43,F
039D:  GOTO   379
039E:  MOVLW  01
039F:  ADDWF  77,F
03A0:  BTFSC  03.0
03A1:  GOTO   3C6
03A2:  BTFSC  78.7
03A3:  GOTO   3AB
03A4:  RLF    47,F
03A5:  RLF    7A,F
03A6:  RLF    79,F
03A7:  RLF    78,F
03A8:  DECF   77,F
03A9:  BTFSC  03.2
03AA:  GOTO   3C6
03AB:  BTFSS  47.7
03AC:  GOTO   3BC
03AD:  INCF   7A,F
03AE:  BTFSS  03.2
03AF:  GOTO   3BC
03B0:  INCF   79,F
03B1:  BTFSS  03.2
03B2:  GOTO   3BC
03B3:  INCF   78,F
03B4:  BTFSS  03.2
03B5:  GOTO   3BC
03B6:  RRF    78,F
03B7:  RRF    79,F
03B8:  RRF    7A,F
03B9:  INCF   77,F
03BA:  BTFSC  03.2
03BB:  GOTO   3C6
03BC:  MOVF   39,W
03BD:  MOVWF  44
03BE:  MOVF   3D,W
03BF:  XORWF  44,F
03C0:  BTFSS  44.7
03C1:  GOTO   3C4
03C2:  BSF    78.7
03C3:  GOTO   3CA
03C4:  BCF    78.7
03C5:  GOTO   3CA
03C6:  CLRF   77
03C7:  CLRF   78
03C8:  CLRF   79
03C9:  CLRF   7A
03CA:  MOVF   7A,W
03CB:  MOVWF  29
03CC:  MOVF   79,W
03CD:  MOVWF  28
03CE:  MOVF   78,W
03CF:  MOVWF  27
03D0:  MOVF   77,W
03D1:  MOVWF  26
03D2:  DECFSZ 32,F
03D3:  GOTO   348
03D4:  MOVF   29,W
03D5:  MOVWF  3B
03D6:  MOVF   28,W
03D7:  MOVWF  3A
03D8:  MOVF   27,W
03D9:  MOVWF  39
03DA:  MOVF   26,W
03DB:  MOVWF  38
03DC:  MOVF   38,W
03DD:  SUBLW  B6
03DE:  MOVWF  38
03DF:  CLRF   7A
03E0:  MOVF   39,W
03E1:  MOVWF  3C
03E2:  BSF    39.7
03E3:  BCF    03.0
03E4:  RRF    39,F
03E5:  RRF    3A,F
03E6:  RRF    3B,F
03E7:  RRF    7A,F
03E8:  RRF    79,F
03E9:  RRF    78,F
03EA:  RRF    77,F
03EB:  DECFSZ 38,F
03EC:  GOTO   3E3
03ED:  BTFSS  3C.7
03EE:  GOTO   3FA
03EF:  COMF   77,F
03F0:  COMF   78,F
03F1:  COMF   79,F
03F2:  COMF   7A,F
03F3:  INCF   77,F
03F4:  BTFSC  03.2
03F5:  INCF   78,F
03F6:  BTFSC  03.2
03F7:  INCF   79,F
03F8:  BTFSC  03.2
03F9:  INCF   7A,F
03FA:  MOVF   7A,W
03FB:  MOVWF  29
03FC:  MOVF   79,W
03FD:  MOVWF  28
03FE:  MOVF   78,W
03FF:  MOVWF  27
0400:  MOVF   77,W
0401:  MOVWF  26
0402:  BTFSS  29.7
0403:  GOTO   411
0404:  DECF   30,F
0405:  BSF    30.5
0406:  COMF   26,F
0407:  COMF   27,F
0408:  COMF   28,F
0409:  COMF   29,F
040A:  INCF   26,F
040B:  BTFSC  03.2
040C:  INCF   27,F
040D:  BTFSC  03.2
040E:  INCF   28,F
040F:  BTFSC  03.2
0410:  INCF   29,F
0411:  MOVLW  3B
0412:  MOVWF  37
0413:  MOVLW  9A
0414:  MOVWF  36
0415:  MOVLW  CA
0416:  MOVWF  35
0417:  CLRF   34
0418:  MOVLW  0A
0419:  MOVWF  32
041A:  MOVF   2A,W
041B:  BTFSC  03.2
041C:  INCF   30,F
041D:  BSF    03.1
041E:  MOVLW  20
041F:  MOVWF  05
0420:  MOVLW  06
0421:  MOVWF  04
0422:  MOVF   29,W
0423:  MOVWF  3B
0424:  MOVF   28,W
0425:  MOVWF  3A
0426:  MOVF   27,W
0427:  MOVWF  39
0428:  MOVF   26,W
0429:  MOVWF  38
042A:  MOVF   37,W
042B:  MOVWF  3F
042C:  MOVF   36,W
042D:  MOVWF  3E
042E:  MOVF   35,W
042F:  MOVWF  3D
0430:  MOVF   34,W
0431:  MOVWF  3C
0432:  CALL   2F5
0433:  MOVF   78,W
0434:  MOVF   77,F
0435:  BTFSS  03.2
0436:  GOTO   44A
0437:  INCF   2A,W
0438:  SUBWF  32,W
0439:  BTFSC  03.2
043A:  GOTO   44A
043B:  MOVF   30,W
043C:  BTFSC  03.2
043D:  GOTO   44C
043E:  ANDLW  0F
043F:  SUBWF  32,W
0440:  BTFSC  03.2
0441:  GOTO   444
0442:  BTFSC  03.0
0443:  GOTO   47C
0444:  BTFSC  30.7
0445:  GOTO   47C
0446:  BTFSC  30.6
0447:  GOTO   44C
0448:  MOVLW  20
0449:  GOTO   478
044A:  MOVLW  20
044B:  ANDWF  30,F
044C:  BTFSS  30.5
044D:  GOTO   45A
044E:  BCF    30.5
044F:  MOVF   2A,W
0450:  BTFSS  03.2
0451:  DECF   30,F
0452:  MOVF   77,W
0453:  MOVWF  30
0454:  MOVLW  2D
0455:  MOVWF  38
0456:  CALL   22B
0457:  MOVF   30,W
0458:  MOVWF  77
0459:  CLRF   30
045A:  MOVF   2A,W
045B:  SUBWF  32,W
045C:  BTFSS  03.2
045D:  GOTO   468
045E:  MOVF   77,W
045F:  MOVWF  30
0460:  MOVLW  2E
0461:  MOVWF  38
0462:  CALL   22B
0463:  MOVF   30,W
0464:  MOVWF  77
0465:  MOVLW  20
0466:  ANDWF  30,F
0467:  MOVLW  00
0468:  MOVLW  30
0469:  BTFSS  30.5
046A:  GOTO   478
046B:  BCF    30.5
046C:  MOVF   2A,W
046D:  BTFSS  03.2
046E:  DECF   30,F
046F:  MOVF   77,W
0470:  MOVWF  30
0471:  MOVLW  2D
0472:  MOVWF  38
0473:  CALL   22B
0474:  MOVF   30,W
0475:  MOVWF  77
0476:  CLRF   30
0477:  MOVLW  30
0478:  ADDWF  77,F
0479:  MOVF   77,W
047A:  MOVWF  38
047B:  CALL   22B
047C:  BCF    03.1
047D:  MOVF   37,W
047E:  MOVWF  3B
047F:  MOVF   36,W
0480:  MOVWF  3A
0481:  MOVF   35,W
0482:  MOVWF  39
0483:  MOVF   34,W
0484:  MOVWF  38
0485:  CLRF   3F
0486:  CLRF   3E
0487:  CLRF   3D
0488:  MOVLW  0A
0489:  MOVWF  3C
048A:  CALL   2F5
048B:  MOVF   7A,W
048C:  MOVWF  37
048D:  MOVF   79,W
048E:  MOVWF  36
048F:  MOVF   78,W
0490:  MOVWF  35
0491:  MOVF   77,W
0492:  MOVWF  34
0493:  DECFSZ 32,F
0494:  GOTO   41D
0495:  MOVLP  00
0496:  GOTO   50D (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses INTRC_IO 
.................... #use delay(crystal=1000000) 
*
0012:  MOVLW  20
0013:  MOVWF  05
0014:  MOVLW  0B
0015:  MOVWF  04
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   01F
0019:  MOVLW  52
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   019
001F:  RETURN
.................... #define LCD_ENABLE_PIN  PIN_C2                                   
.................... #define LCD_RS_PIN      PIN_C0                                   
.................... #define LCD_RW_PIN      PIN_C1                                   
.................... #define LCD_DATA4       PIN_C3                               
.................... #define LCD_DATA5       PIN_C4                                     
.................... #define LCD_DATA6       PIN_C5                                   
.................... #define LCD_DATA7       PIN_C6 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008F:  BSF    0E.3
....................    output_float(LCD_DATA5); 
0090:  BSF    0E.4
....................    output_float(LCD_DATA6); 
0091:  BSF    0E.5
....................    output_float(LCD_DATA7); 
0092:  BSF    0E.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0093:  MOVLB  02
0094:  BSF    0E.1
0095:  MOVLB  01
0096:  BCF    0E.1
....................    delay_cycles(1); 
0097:  NOP
....................    lcd_output_enable(1); 
0098:  MOVLB  02
0099:  BSF    0E.2
009A:  MOVLB  01
009B:  BCF    0E.2
....................    delay_cycles(1); 
009C:  NOP
....................    high = lcd_read_nibble(); 
009D:  MOVLB  00
009E:  CALL   056
009F:  MOVF   78,W
00A0:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
00A1:  MOVLB  02
00A2:  BCF    0E.2
00A3:  MOVLB  01
00A4:  BCF    0E.2
....................    delay_cycles(1); 
00A5:  NOP
....................    lcd_output_enable(1); 
00A6:  MOVLB  02
00A7:  BSF    0E.2
00A8:  MOVLB  01
00A9:  BCF    0E.2
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
00AA:  MOVLB  00
00AB:  CALL   056
00AC:  MOVF   78,W
00AD:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
00AE:  MOVLB  02
00AF:  BCF    0E.2
00B0:  MOVLB  01
00B1:  BCF    0E.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B2:  BCF    0E.3
....................    output_drive(LCD_DATA5); 
00B3:  BCF    0E.4
....................    output_drive(LCD_DATA6); 
00B4:  BCF    0E.5
....................    output_drive(LCD_DATA7); 
00B5:  BCF    0E.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B6:  MOVLB  00
00B7:  SWAPF  40,W
00B8:  MOVWF  77
00B9:  MOVLW  F0
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  3F,W
00BD:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0056:  CLRF   41
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0057:  MOVLB  01
0058:  BSF    0E.3
0059:  MOVLW  00
005A:  MOVLB  00
005B:  BTFSC  0E.3
005C:  MOVLW  01
005D:  IORWF  41,F
....................    n |= input(LCD_DATA5) << 1; 
005E:  MOVLB  01
005F:  BSF    0E.4
0060:  MOVLW  00
0061:  MOVLB  00
0062:  BTFSC  0E.4
0063:  MOVLW  01
0064:  MOVWF  77
0065:  BCF    03.0
0066:  RLF    77,F
0067:  MOVF   77,W
0068:  IORWF  41,F
....................    n |= input(LCD_DATA6) << 2; 
0069:  MOVLB  01
006A:  BSF    0E.5
006B:  MOVLW  00
006C:  MOVLB  00
006D:  BTFSC  0E.5
006E:  MOVLW  01
006F:  MOVWF  77
0070:  RLF    77,F
0071:  RLF    77,F
0072:  MOVLW  FC
0073:  ANDWF  77,F
0074:  MOVF   77,W
0075:  IORWF  41,F
....................    n |= input(LCD_DATA7) << 3; 
0076:  MOVLB  01
0077:  BSF    0E.6
0078:  MOVLW  00
0079:  MOVLB  00
007A:  BTFSC  0E.6
007B:  MOVLW  01
007C:  MOVWF  77
007D:  RLF    77,F
007E:  RLF    77,F
007F:  RLF    77,F
0080:  MOVLW  F8
0081:  ANDWF  77,F
0082:  MOVF   77,W
0083:  IORWF  41,F
....................     
....................    return(n); 
0084:  MOVF   41,W
0085:  MOVWF  78
....................   #else 
0086:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0020:  BTFSC  40.0
0021:  GOTO   026
0022:  MOVLB  02
0023:  BCF    0E.3
0024:  GOTO   028
0025:  MOVLB  00
0026:  MOVLB  02
0027:  BSF    0E.3
0028:  MOVLB  01
0029:  BCF    0E.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002A:  MOVLB  00
002B:  BTFSC  40.1
002C:  GOTO   031
002D:  MOVLB  02
002E:  BCF    0E.4
002F:  GOTO   033
0030:  MOVLB  00
0031:  MOVLB  02
0032:  BSF    0E.4
0033:  MOVLB  01
0034:  BCF    0E.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0035:  MOVLB  00
0036:  BTFSC  40.2
0037:  GOTO   03C
0038:  MOVLB  02
0039:  BCF    0E.5
003A:  GOTO   03E
003B:  MOVLB  00
003C:  MOVLB  02
003D:  BSF    0E.5
003E:  MOVLB  01
003F:  BCF    0E.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0040:  MOVLB  00
0041:  BTFSC  40.3
0042:  GOTO   047
0043:  MOVLB  02
0044:  BCF    0E.6
0045:  GOTO   049
0046:  MOVLB  00
0047:  MOVLB  02
0048:  BSF    0E.6
0049:  MOVLB  01
004A:  BCF    0E.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  MOVLB  02
004D:  BSF    0E.2
004E:  MOVLB  01
004F:  BCF    0E.2
....................    delay_us(2); 
....................    lcd_output_enable(0); 
0050:  MOVLB  02
0051:  BCF    0E.2
0052:  MOVLB  01
0053:  BCF    0E.2
0054:  MOVLB  00
0055:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0087:  MOVLB  01
0088:  BCF    0E.2
....................    lcd_rs_tris(); 
0089:  BCF    0E.0
....................    lcd_rw_tris(); 
008A:  BCF    0E.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008B:  MOVLB  02
008C:  BCF    0E.0
008D:  MOVLB  01
008E:  BCF    0E.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BE:  MOVF   78,W
00BF:  MOVWF  3F
00C0:  BTFSS  3F.7
00C1:  GOTO   0C4
00C2:  MOVLB  01
00C3:  GOTO   08F
....................    lcd_output_rs(address); 
00C4:  MOVF   3D,F
00C5:  BTFSS  03.2
00C6:  GOTO   0CB
00C7:  MOVLB  02
00C8:  BCF    0E.0
00C9:  GOTO   0CD
00CA:  MOVLB  00
00CB:  MOVLB  02
00CC:  BSF    0E.0
00CD:  MOVLB  01
00CE:  BCF    0E.0
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_rw(0); 
00D0:  MOVLB  02
00D1:  BCF    0E.1
00D2:  MOVLB  01
00D3:  BCF    0E.1
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_enable(0); 
00D5:  MOVLB  02
00D6:  BCF    0E.2
00D7:  MOVLB  01
00D8:  BCF    0E.2
....................    lcd_send_nibble(n >> 4); 
00D9:  MOVLB  00
00DA:  SWAPF  3E,W
00DB:  MOVWF  3F
00DC:  MOVLW  0F
00DD:  ANDWF  3F,F
00DE:  MOVF   3F,W
00DF:  MOVWF  40
00E0:  CALL   020
....................    lcd_send_nibble(n & 0xf); 
00E1:  MOVF   3E,W
00E2:  ANDLW  0F
00E3:  MOVWF  3F
00E4:  MOVWF  40
00E5:  CALL   020
00E6:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E7:  MOVLW  28
00E8:  MOVWF  27
00E9:  MOVLW  0C
00EA:  MOVWF  28
00EB:  MOVLW  01
00EC:  MOVWF  29
00ED:  MOVLW  06
00EE:  MOVWF  2A
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EF:  MOVLB  02
00F0:  BCF    0E.2
00F1:  MOVLB  01
00F2:  BCF    0E.2
....................    lcd_output_rs(0); 
00F3:  MOVLB  02
00F4:  BCF    0E.0
00F5:  MOVLB  01
00F6:  BCF    0E.0
....................    lcd_output_rw(0); 
00F7:  MOVLB  02
00F8:  BCF    0E.1
00F9:  MOVLB  01
00FA:  BCF    0E.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FB:  BCF    0E.3
....................    output_drive(LCD_DATA5); 
00FC:  BCF    0E.4
....................    output_drive(LCD_DATA6); 
00FD:  BCF    0E.5
....................    output_drive(LCD_DATA7); 
00FE:  BCF    0E.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FF:  BCF    0E.2
....................    lcd_rs_tris(); 
0100:  BCF    0E.0
....................    lcd_rw_tris(); 
0101:  BCF    0E.1
....................  #endif 
....................      
....................    delay_ms(15); 
0102:  MOVLW  0F
0103:  MOVLB  00
0104:  MOVWF  2B
0105:  CALL   012
....................    for(i=1;i<=3;++i) 
0106:  MOVLW  01
0107:  MOVWF  26
0108:  MOVF   26,W
0109:  SUBLW  03
010A:  BTFSS  03.0
010B:  GOTO   114
....................    { 
....................        lcd_send_nibble(3); 
010C:  MOVLW  03
010D:  MOVWF  40
010E:  CALL   020
....................        delay_ms(5); 
010F:  MOVLW  05
0110:  MOVWF  2B
0111:  CALL   012
0112:  INCF   26,F
0113:  GOTO   108
....................    } 
....................     
....................    lcd_send_nibble(2); 
0114:  MOVLW  02
0115:  MOVWF  40
0116:  CALL   020
....................    delay_ms(5); 
0117:  MOVLW  05
0118:  MOVWF  2B
0119:  CALL   012
....................    for(i=0;i<=3;++i) 
011A:  CLRF   26
011B:  MOVF   26,W
011C:  SUBLW  03
011D:  BTFSS  03.0
011E:  GOTO   12E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011F:  MOVLW  07
0120:  ADDWF  26,W
0121:  MOVWF  04
0122:  MOVLW  20
0123:  MOVWF  05
0124:  BTFSC  03.0
0125:  INCF   05,F
0126:  MOVF   00,W
0127:  MOVWF  2B
0128:  CLRF   3D
0129:  MOVF   2B,W
012A:  MOVWF  3E
012B:  CALL   087
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012C:  INCF   26,F
012D:  GOTO   11B
012E:  MOVLP  00
012F:  GOTO   4B7 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0219:  DECFSZ 3A,W
021A:  GOTO   21C
021B:  GOTO   21F
....................       address=LCD_LINE_TWO; 
021C:  MOVLW  40
021D:  MOVWF  3B
021E:  GOTO   220
....................    else 
....................       address=0; 
021F:  CLRF   3B
....................       
....................    address+=x-1; 
0220:  MOVLW  01
0221:  SUBWF  39,W
0222:  ADDWF  3B,F
....................    lcd_send_byte(0,0x80|address); 
0223:  MOVF   3B,W
0224:  IORLW  80
0225:  MOVWF  3C
0226:  CLRF   3D
0227:  MOVF   3C,W
0228:  MOVWF  3E
0229:  CALL   087
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
022A:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
022B:  MOVF   38,W
022C:  XORLW  07
022D:  BTFSC  03.2
022E:  GOTO   239
022F:  XORLW  0B
0230:  BTFSC  03.2
0231:  GOTO   23E
0232:  XORLW  06
0233:  BTFSC  03.2
0234:  GOTO   248
0235:  XORLW  02
0236:  BTFSC  03.2
0237:  GOTO   24E
0238:  GOTO   253
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0239:  MOVLW  01
023A:  MOVWF  39
023B:  MOVWF  3A
023C:  CALL   219
023D:  GOTO   258
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
023E:  CLRF   3D
023F:  MOVLW  01
0240:  MOVWF  3E
0241:  CALL   087
....................                      delay_ms(2); 
0242:  MOVLW  A6
0243:  MOVWF  77
0244:  DECFSZ 77,F
0245:  GOTO   244
0246:  NOP
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0247:  GOTO   258
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0248:  MOVLW  01
0249:  MOVWF  39
024A:  MOVLW  02
024B:  MOVWF  3A
024C:  CALL   219
024D:  GOTO   258
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
024E:  CLRF   3D
024F:  MOVLW  10
0250:  MOVWF  3E
0251:  CALL   087
0252:  GOTO   258
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0253:  MOVLW  01
0254:  MOVWF  3D
0255:  MOVF   38,W
0256:  MOVWF  3E
0257:  CALL   087
....................      #endif 
....................    } 
0258:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define VREF      PIN_A0 
.................... //!#define VREF_HIGH       PIN_A1 
....................  
....................  
....................  
.................... float value; 
....................  
.................... void main() 
*
0497:  CLRF   25
0498:  CLRF   24
0499:  MOVLB  03
049A:  CLRF   0C
049B:  CLRF   0D
049C:  CLRF   0E
049D:  MOVLB  02
049E:  CLRF   12
049F:  CLRF   11
04A0:  CLRF   14
04A1:  CLRF   13
.................... { 
.................... set_tris_a(0xff); 
04A2:  MOVLW  FF
04A3:  MOVLB  01
04A4:  MOVWF  0C
.................... setup_adc_ports(SAN2); 
04A5:  BCF    1E.0
04A6:  BCF    1E.1
04A7:  MOVLW  04
04A8:  MOVLB  03
04A9:  MOVWF  0C
04AA:  MOVLW  00
04AB:  MOVWF  0E
04AC:  MOVWF  0D
.................... setup_adc_reference(VSS_VDD); 
04AD:  MOVLB  01
04AE:  BCF    1E.0
04AF:  BCF    1E.1
.................... setup_adc(ADC_CLOCK_INTERNAL); 
04B0:  BSF    1E.4
04B1:  BSF    1E.5
04B2:  BCF    1E.6
04B3:  BSF    1E.7
04B4:  BSF    1D.0
....................  
.................... lcd_init(); 
04B5:  MOVLB  00
04B6:  GOTO   0E7
....................  
....................    while(TRUE) 
....................    { 
.................... set_adc_channel(2); 
04B7:  MOVLW  08
04B8:  MOVWF  78
04B9:  MOVLB  01
04BA:  MOVF   1D,W
04BB:  ANDLW  83
04BC:  IORWF  78,W
04BD:  MOVWF  1D
.................... delay_us(10); 
04BE:  GOTO   4BF
.................... value = read_adc() / 2.046; 
04BF:  BSF    1D.1
04C0:  BTFSC  1D.1
04C1:  GOTO   4C0
04C2:  MOVF   1C,W
04C3:  MOVWF  7A
04C4:  MOVF   1B,W
04C5:  MOVLB  00
04C6:  MOVWF  26
04C7:  MOVF   7A,W
04C8:  MOVWF  27
04C9:  MOVWF  29
04CA:  MOVF   26,W
04CB:  MOVWF  28
04CC:  GOTO   130
04CD:  MOVF   7A,W
04CE:  MOVWF  2B
04CF:  MOVF   79,W
04D0:  MOVWF  2A
04D1:  MOVF   78,W
04D2:  MOVWF  29
04D3:  MOVF   77,W
04D4:  MOVWF  28
04D5:  MOVLW  AA
04D6:  MOVWF  2F
04D7:  MOVLW  F1
04D8:  MOVWF  2E
04D9:  MOVLW  02
04DA:  MOVWF  2D
04DB:  MOVLW  80
04DC:  MOVWF  2C
04DD:  GOTO   14E
04DE:  MOVF   7A,W
04DF:  MOVWF  23
04E0:  MOVF   79,W
04E1:  MOVWF  22
04E2:  MOVF   78,W
04E3:  MOVWF  21
04E4:  MOVF   77,W
04E5:  MOVWF  20
.................... lcd_gotoxy(1, 1); 
04E6:  MOVLW  01
04E7:  MOVWF  39
04E8:  MOVWF  3A
04E9:  CALL   219
.................... printf(lcd_putc,"Trong 20146107"); 
04EA:  MOVLW  03
04EB:  MOVLB  03
04EC:  MOVWF  11
04ED:  MOVLW  00
04EE:  MOVWF  12
04EF:  MOVLB  00
04F0:  GOTO   259
.................... lcd_gotoxy(1,2); 
04F1:  MOVLW  01
04F2:  MOVWF  39
04F3:  MOVLW  02
04F4:  MOVWF  3A
04F5:  CALL   219
.................... printf(lcd_putc, "Temp = %.1f C", value); 
04F6:  MOVLW  0B
04F7:  MOVLB  03
04F8:  MOVWF  11
04F9:  MOVLW  00
04FA:  MOVWF  12
04FB:  BCF    03.0
04FC:  MOVLW  07
04FD:  MOVLB  00
04FE:  MOVWF  26
04FF:  GOTO   2A4
0500:  MOVLW  89
0501:  MOVWF  04
0502:  MOVF   23,W
0503:  MOVWF  29
0504:  MOVF   22,W
0505:  MOVWF  28
0506:  MOVF   21,W
0507:  MOVWF  27
0508:  MOVF   20,W
0509:  MOVWF  26
050A:  MOVLW  01
050B:  MOVWF  2A
050C:  GOTO   342
050D:  MOVLW  20
050E:  MOVWF  38
050F:  CALL   22B
0510:  MOVLW  43
0511:  MOVWF  38
0512:  CALL   22B
0513:  GOTO   4B7
....................  
....................    } 
....................  
.................... } 
0514:  SLEEP

Configuration Fuses:
   Word  1: 3FC1   XT NOWDT PUT MCLR NOPROTECT BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1FFF   NOWRT STVREN BORV19 NOLPBOR NODEBUG NOLVP
